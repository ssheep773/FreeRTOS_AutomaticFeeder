
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006b64  08006b64  00016b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c44  08006c44  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006c44  08006c44  00016c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c4c  08006c4c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c4c  08006c4c  00016c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00012ed0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f44  20012f44  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b3c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bc4  00000000  00000000  00032be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  000357a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010a0  00000000  00000000  00036978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004295  00000000  00000000  00037a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b26  00000000  00000000  0003bcad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d307b  00000000  00000000  000507d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012384e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e84  00000000  00000000  001238a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b4c 	.word	0x08006b4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006b4c 	.word	0x08006b4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <lcd_send_cmd>:
#include "i2c-lcd.h"

extern I2C_HandleTypeDef hi2c1;
#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd(char cmd) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af02      	add	r7, sp, #8
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
    char data[4];
    data[0] = (cmd & 0xF0) | 0x0C;
 800057e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000582:	f023 030f 	bic.w	r3, r3, #15
 8000586:	b25b      	sxtb	r3, r3
 8000588:	f043 030c 	orr.w	r3, r3, #12
 800058c:	b25b      	sxtb	r3, r3
 800058e:	b2db      	uxtb	r3, r3
 8000590:	733b      	strb	r3, [r7, #12]
    data[1] = (cmd & 0xF0) | 0x08;
 8000592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000596:	f023 030f 	bic.w	r3, r3, #15
 800059a:	b25b      	sxtb	r3, r3
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	737b      	strb	r3, [r7, #13]
    data[2] = (cmd << 4) | 0x0C;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	011b      	lsls	r3, r3, #4
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	f043 030c 	orr.w	r3, r3, #12
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	73bb      	strb	r3, [r7, #14]
    data[3] = (cmd << 4) | 0x08;
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	b25b      	sxtb	r3, r3
 80005bc:	f043 0308 	orr.w	r3, r3, #8
 80005c0:	b25b      	sxtb	r3, r3
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data, 4, 100);
 80005c6:	f107 020c 	add.w	r2, r7, #12
 80005ca:	2364      	movs	r3, #100	; 0x64
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2304      	movs	r3, #4
 80005d0:	214e      	movs	r1, #78	; 0x4e
 80005d2:	4803      	ldr	r0, [pc, #12]	; (80005e0 <lcd_send_cmd+0x6c>)
 80005d4:	f001 fbe8 	bl	8001da8 <HAL_I2C_Master_Transmit>
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000090 	.word	0x20000090

080005e4 <lcd_send_data>:

void lcd_send_data(char data) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
    char data_arr[4];
    data_arr[0] = (data & 0xF0) | 0x0D;
 80005ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f2:	f023 030f 	bic.w	r3, r3, #15
 80005f6:	b25b      	sxtb	r3, r3
 80005f8:	f043 030d 	orr.w	r3, r3, #13
 80005fc:	b25b      	sxtb	r3, r3
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	733b      	strb	r3, [r7, #12]
    data_arr[1] = (data & 0xF0) | 0x09;
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	f023 030f 	bic.w	r3, r3, #15
 800060a:	b25b      	sxtb	r3, r3
 800060c:	f043 0309 	orr.w	r3, r3, #9
 8000610:	b25b      	sxtb	r3, r3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	737b      	strb	r3, [r7, #13]
    data_arr[2] = (data << 4) | 0x0D;
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	b25b      	sxtb	r3, r3
 800061c:	f043 030d 	orr.w	r3, r3, #13
 8000620:	b25b      	sxtb	r3, r3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	73bb      	strb	r3, [r7, #14]
    data_arr[3] = (data << 4) | 0x09;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	011b      	lsls	r3, r3, #4
 800062a:	b25b      	sxtb	r3, r3
 800062c:	f043 0309 	orr.w	r3, r3, #9
 8000630:	b25b      	sxtb	r3, r3
 8000632:	b2db      	uxtb	r3, r3
 8000634:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_arr, 4, 100);
 8000636:	f107 020c 	add.w	r2, r7, #12
 800063a:	2364      	movs	r3, #100	; 0x64
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2304      	movs	r3, #4
 8000640:	214e      	movs	r1, #78	; 0x4e
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <lcd_send_data+0x6c>)
 8000644:	f001 fbb0 	bl	8001da8 <HAL_I2C_Master_Transmit>
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000090 	.word	0x20000090

08000654 <lcd_send_string>:

void lcd_send_string(char *str) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data(*str++);
 800065c:	e006      	b.n	800066c <lcd_send_string+0x18>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	1c5a      	adds	r2, r3, #1
 8000662:	607a      	str	r2, [r7, #4]
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ffbc 	bl	80005e4 <lcd_send_data>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1f4      	bne.n	800065e <lcd_send_string+0xa>
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <lcd_clear>:

void lcd_clear(void) {
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ff76 	bl	8000574 <lcd_send_cmd>
    HAL_Delay(2);
 8000688:	2002      	movs	r0, #2
 800068a:	f000 ff43 	bl	8001514 <HAL_Delay>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_put_cur>:

void lcd_put_cur(int row, int col) {
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
    switch (row) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d003      	beq.n	80006aa <lcd_put_cur+0x18>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d005      	beq.n	80006b4 <lcd_put_cur+0x22>
 80006a8:	e009      	b.n	80006be <lcd_put_cur+0x2c>
    case 0:
        col |= 0x80;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b0:	603b      	str	r3, [r7, #0]
        break;
 80006b2:	e004      	b.n	80006be <lcd_put_cur+0x2c>
    case 1:
        col |= 0xC0;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80006ba:	603b      	str	r3, [r7, #0]
        break;
 80006bc:	bf00      	nop
    }
    lcd_send_cmd(col);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff56 	bl	8000574 <lcd_send_cmd>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <lcd_init>:

void lcd_init(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 80006d4:	2032      	movs	r0, #50	; 0x32
 80006d6:	f000 ff1d 	bl	8001514 <HAL_Delay>
    lcd_send_cmd(0x30);
 80006da:	2030      	movs	r0, #48	; 0x30
 80006dc:	f7ff ff4a 	bl	8000574 <lcd_send_cmd>
    HAL_Delay(5);
 80006e0:	2005      	movs	r0, #5
 80006e2:	f000 ff17 	bl	8001514 <HAL_Delay>
    lcd_send_cmd(0x30);
 80006e6:	2030      	movs	r0, #48	; 0x30
 80006e8:	f7ff ff44 	bl	8000574 <lcd_send_cmd>
    HAL_Delay(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f000 ff11 	bl	8001514 <HAL_Delay>
    lcd_send_cmd(0x30);
 80006f2:	2030      	movs	r0, #48	; 0x30
 80006f4:	f7ff ff3e 	bl	8000574 <lcd_send_cmd>
    HAL_Delay(10);
 80006f8:	200a      	movs	r0, #10
 80006fa:	f000 ff0b 	bl	8001514 <HAL_Delay>
    lcd_send_cmd(0x20);
 80006fe:	2020      	movs	r0, #32
 8000700:	f7ff ff38 	bl	8000574 <lcd_send_cmd>
    HAL_Delay(10);
 8000704:	200a      	movs	r0, #10
 8000706:	f000 ff05 	bl	8001514 <HAL_Delay>

    lcd_send_cmd(0x28);
 800070a:	2028      	movs	r0, #40	; 0x28
 800070c:	f7ff ff32 	bl	8000574 <lcd_send_cmd>
    HAL_Delay(1);
 8000710:	2001      	movs	r0, #1
 8000712:	f000 feff 	bl	8001514 <HAL_Delay>
    lcd_send_cmd(0x08);
 8000716:	2008      	movs	r0, #8
 8000718:	f7ff ff2c 	bl	8000574 <lcd_send_cmd>
    HAL_Delay(1);
 800071c:	2001      	movs	r0, #1
 800071e:	f000 fef9 	bl	8001514 <HAL_Delay>
    lcd_send_cmd(0x01);
 8000722:	2001      	movs	r0, #1
 8000724:	f7ff ff26 	bl	8000574 <lcd_send_cmd>
    HAL_Delay(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f000 fef3 	bl	8001514 <HAL_Delay>
    HAL_Delay(1);
 800072e:	2001      	movs	r0, #1
 8000730:	f000 fef0 	bl	8001514 <HAL_Delay>
    lcd_send_cmd(0x06);
 8000734:	2006      	movs	r0, #6
 8000736:	f7ff ff1d 	bl	8000574 <lcd_send_cmd>
    HAL_Delay(1);
 800073a:	2001      	movs	r0, #1
 800073c:	f000 feea 	bl	8001514 <HAL_Delay>
    lcd_send_cmd(0x0C);
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff ff17 	bl	8000574 <lcd_send_cmd>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <InfraredTask>:
TaskHandle_t xHandle = NULL;
QueueHandle_t MsgQueue = NULL;

/* detect the roller counting for running lap*/
void InfraredTask(void *pvParameters)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    for (;;)
    {
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_RESET) {
 8000754:	2110      	movs	r1, #16
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <InfraredTask+0x40>)
 8000758:	f001 f97e 	bl	8001a58 <HAL_GPIO_ReadPin>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d10c      	bne.n	800077c <InfraredTask+0x30>
			if (objectDetected == 0) {
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <InfraredTask+0x44>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d10b      	bne.n	8000782 <InfraredTask+0x36>
				objectDetected = 1;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <InfraredTask+0x44>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
				RunningLap++;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <InfraredTask+0x48>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	4a07      	ldr	r2, [pc, #28]	; (8000794 <InfraredTask+0x48>)
 8000778:	6013      	str	r3, [r2, #0]
 800077a:	e002      	b.n	8000782 <InfraredTask+0x36>
			}
		}
		else
			objectDetected = 0;
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <InfraredTask+0x44>)
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
		vTaskDelay(10);
 8000782:	200a      	movs	r0, #10
 8000784:	f004 f8c4 	bl	8004910 <vTaskDelay>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_RESET) {
 8000788:	e7e4      	b.n	8000754 <InfraredTask+0x8>
 800078a:	bf00      	nop
 800078c:	40020800 	.word	0x40020800
 8000790:	20000130 	.word	0x20000130
 8000794:	2000012c 	.word	0x2000012c

08000798 <ButtonTask>:
    }
}

void ButtonTask(void *pvParameters) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	unsigned int task = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
	unsigned int count = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		if(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0))
 80007a8:	2101      	movs	r1, #1
 80007aa:	4817      	ldr	r0, [pc, #92]	; (8000808 <ButtonTask+0x70>)
 80007ac:	f001 f954 	bl	8001a58 <HAL_GPIO_ReadPin>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d0f8      	beq.n	80007a8 <ButtonTask+0x10>
		{
			HAL_Delay(100);//debounce
 80007b6:	2064      	movs	r0, #100	; 0x64
 80007b8:	f000 feac 	bl	8001514 <HAL_Delay>
			while(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0))
 80007bc:	bf00      	nop
 80007be:	2101      	movs	r1, #1
 80007c0:	4811      	ldr	r0, [pc, #68]	; (8000808 <ButtonTask+0x70>)
 80007c2:	f001 f949 	bl	8001a58 <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f8      	bne.n	80007be <ButtonTask+0x26>
			{;}
			++count ;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
			if(count & 0x01)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f003 0301 	and.w	r3, r3, #1
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d002      	beq.n	80007e2 <ButtonTask+0x4a>
				task = 1;
 80007dc:	2301      	movs	r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	e001      	b.n	80007e6 <ButtonTask+0x4e>
			else
				task = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
			xQueueSend(MsgQueue,(int * ) &task,1);
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <ButtonTask+0x74>)
 80007e8:	6818      	ldr	r0, [r3, #0]
 80007ea:	f107 0108 	add.w	r1, r7, #8
 80007ee:	2300      	movs	r3, #0
 80007f0:	2201      	movs	r2, #1
 80007f2:	f003 faed 	bl	8003dd0 <xQueueGenericSend>
			taskYIELD();
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <ButtonTask+0x78>)
 80007f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	f3bf 8f4f 	dsb	sy
 8000802:	f3bf 8f6f 	isb	sy
		if(HAL_GPIO_ReadPin(btn_blue_GPIO_Port, GPIO_PIN_0))
 8000806:	e7cf      	b.n	80007a8 <ButtonTask+0x10>
 8000808:	40020000 	.word	0x40020000
 800080c:	20000140 	.word	0x20000140
 8000810:	e000ed04 	.word	0xe000ed04

08000814 <Display>:
		}
	}
}

void Display(void *pvParameters)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	unsigned int displaymode = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(;;)
	{
		char buffer[30];
		if  (displaymode == 0){
 8000820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000822:	2b00      	cmp	r3, #0
 8000824:	d13b      	bne.n	800089e <Display+0x8a>
			for (;;) {
				lcd_clear();
 8000826:	f7ff ff2a 	bl	800067e <lcd_clear>
				lcd_put_cur(0, 0);
 800082a:	2100      	movs	r1, #0
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff ff30 	bl	8000692 <lcd_put_cur>
				sprintf(buffer, "eat: %u    %lu",eat,timeCounter);
 8000832:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <Display+0xe0>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	461a      	mov	r2, r3
 8000838:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <Display+0xe4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f107 000c 	add.w	r0, r7, #12
 8000840:	492e      	ldr	r1, [pc, #184]	; (80008fc <Display+0xe8>)
 8000842:	f005 fd23 	bl	800628c <siprintf>
				lcd_send_string(buffer);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff02 	bl	8000654 <lcd_send_string>

				lcd_put_cur(1, 0);
 8000850:	2100      	movs	r1, #0
 8000852:	2001      	movs	r0, #1
 8000854:	f7ff ff1d 	bl	8000692 <lcd_put_cur>
				memset(buffer, 0, sizeof(buffer));
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	221e      	movs	r2, #30
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f005 fd0b 	bl	800627c <memset>
				sprintf(buffer, "noneat time: %lu", wait_timeCounter);
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <Display+0xec>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4925      	ldr	r1, [pc, #148]	; (8000904 <Display+0xf0>)
 8000870:	4618      	mov	r0, r3
 8000872:	f005 fd0b 	bl	800628c <siprintf>
				lcd_send_string(buffer);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff feea 	bl	8000654 <lcd_send_string>

				xQueueReceive(MsgQueue, &displaymode, 0);
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <Display+0xf4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000888:	2200      	movs	r2, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f003 fc36 	bl	80040fc <xQueueReceive>
				vTaskDelay(10);
 8000890:	200a      	movs	r0, #10
 8000892:	f004 f83d 	bl	8004910 <vTaskDelay>
				if(displaymode == 1) break;
 8000896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000898:	2b01      	cmp	r3, #1
 800089a:	d026      	beq.n	80008ea <Display+0xd6>
				lcd_clear();
 800089c:	e7c3      	b.n	8000826 <Display+0x12>
			}
		}
		else if(displaymode == 1){
 800089e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d1bd      	bne.n	8000820 <Display+0xc>
		    for (;;) {
				lcd_clear();
 80008a4:	f7ff feeb 	bl	800067e <lcd_clear>
				lcd_put_cur(0, 0);
 80008a8:	2100      	movs	r1, #0
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff fef1 	bl	8000692 <lcd_put_cur>
				sprintf(buffer, "RunningLap: %lu", RunningLap);
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <Display+0xf8>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4915      	ldr	r1, [pc, #84]	; (8000910 <Display+0xfc>)
 80008ba:	4618      	mov	r0, r3
 80008bc:	f005 fce6 	bl	800628c <siprintf>
				lcd_send_string(buffer);
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fec5 	bl	8000654 <lcd_send_string>

				xQueueReceive(MsgQueue, &displaymode, 0);
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <Display+0xf4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80008d2:	2200      	movs	r2, #0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f003 fc11 	bl	80040fc <xQueueReceive>
				vTaskDelay(500);
 80008da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008de:	f004 f817 	bl	8004910 <vTaskDelay>
				if(displaymode == 0) break;
 80008e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d002      	beq.n	80008ee <Display+0xda>
				lcd_clear();
 80008e8:	e7dc      	b.n	80008a4 <Display+0x90>
				if(displaymode == 1) break;
 80008ea:	bf00      	nop
 80008ec:	e798      	b.n	8000820 <Display+0xc>
				if(displaymode == 0) break;
 80008ee:	bf00      	nop
	{
 80008f0:	e796      	b.n	8000820 <Display+0xc>
 80008f2:	bf00      	nop
 80008f4:	20000132 	.word	0x20000132
 80008f8:	20000134 	.word	0x20000134
 80008fc:	08006b64 	.word	0x08006b64
 8000900:	20000138 	.word	0x20000138
 8000904:	08006b74 	.word	0x08006b74
 8000908:	20000140 	.word	0x20000140
 800090c:	2000012c 	.word	0x2000012c
 8000910:	08006b88 	.word	0x08006b88

08000914 <Beep>:
		    }
		}
	}
}
/* The buzzer sounds as a reminder */
void Beep(void){
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
	uint32_t From_begin_time = HAL_GetTick();
 800091a:	f000 fdef 	bl	80014fc <HAL_GetTick>
 800091e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, Beep_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2102      	movs	r1, #2
 8000924:	4810      	ldr	r0, [pc, #64]	; (8000968 <Beep+0x54>)
 8000926:	f001 f8af 	bl	8001a88 <HAL_GPIO_WritePin>
	while(HAL_GetTick() - From_begin_time < 50 / portTICK_RATE_MS){}
 800092a:	bf00      	nop
 800092c:	f000 fde6 	bl	80014fc <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	2b31      	cmp	r3, #49	; 0x31
 8000938:	d9f8      	bls.n	800092c <Beep+0x18>

	From_begin_time = HAL_GetTick();
 800093a:	f000 fddf 	bl	80014fc <HAL_GetTick>
 800093e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, Beep_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2102      	movs	r1, #2
 8000944:	4808      	ldr	r0, [pc, #32]	; (8000968 <Beep+0x54>)
 8000946:	f001 f89f 	bl	8001a88 <HAL_GPIO_WritePin>
	while(HAL_GetTick() - From_begin_time < 500 / portTICK_RATE_MS){}
 800094a:	bf00      	nop
 800094c:	f000 fdd6 	bl	80014fc <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800095a:	d3f7      	bcc.n	800094c <Beep+0x38>
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40020000 	.word	0x40020000

0800096c <Motor_Task>:
/* Motor Task to deliver food regularly*/
void Motor_Task(void *pvParameters){
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	for (;;){
		if (timeCounter % FEEDING_INTERVAL_SECONDS ==0){
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <Motor_Task+0x98>)
 8000976:	6819      	ldr	r1, [r3, #0]
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <Motor_Task+0x9c>)
 800097a:	fba3 2301 	umull	r2, r3, r3, r1
 800097e:	08da      	lsrs	r2, r3, #3
 8000980:	4613      	mov	r3, r2
 8000982:	011b      	lsls	r3, r3, #4
 8000984:	1a9b      	subs	r3, r3, r2
 8000986:	1aca      	subs	r2, r1, r3
 8000988:	2a00      	cmp	r2, #0
 800098a:	d1f3      	bne.n	8000974 <Motor_Task+0x8>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000992:	481e      	ldr	r0, [pc, #120]	; (8000a0c <Motor_Task+0xa0>)
 8000994:	f001 f878 	bl	8001a88 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000998:	210c      	movs	r1, #12
 800099a:	481d      	ldr	r0, [pc, #116]	; (8000a10 <Motor_Task+0xa4>)
 800099c:	f002 fadc 	bl	8002f58 <HAL_TIM_PWM_Start>

			uint32_t From_begin_time = HAL_GetTick();
 80009a0:	f000 fdac 	bl	80014fc <HAL_GetTick>
 80009a4:	60f8      	str	r0, [r7, #12]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 150);
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <Motor_Task+0xa4>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2296      	movs	r2, #150	; 0x96
 80009ac:	641a      	str	r2, [r3, #64]	; 0x40
			while(HAL_GetTick() - From_begin_time < 500 / portTICK_RATE_MS){}
 80009ae:	bf00      	nop
 80009b0:	f000 fda4 	bl	80014fc <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009be:	d3f7      	bcc.n	80009b0 <Motor_Task+0x44>

			From_begin_time = HAL_GetTick();
 80009c0:	f000 fd9c 	bl	80014fc <HAL_GetTick>
 80009c4:	60f8      	str	r0, [r7, #12]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 50);
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <Motor_Task+0xa4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2232      	movs	r2, #50	; 0x32
 80009cc:	641a      	str	r2, [r3, #64]	; 0x40
			while(HAL_GetTick() - From_begin_time < 500 / portTICK_RATE_MS){}
 80009ce:	bf00      	nop
 80009d0:	f000 fd94 	bl	80014fc <HAL_GetTick>
 80009d4:	4602      	mov	r2, r0
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009de:	d3f7      	bcc.n	80009d0 <Motor_Task+0x64>

			From_begin_time = HAL_GetTick();
 80009e0:	f000 fd8c 	bl	80014fc <HAL_GetTick>
 80009e4:	60f8      	str	r0, [r7, #12]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 150);
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <Motor_Task+0xa4>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2296      	movs	r2, #150	; 0x96
 80009ec:	641a      	str	r2, [r3, #64]	; 0x40
			while(HAL_GetTick() - From_begin_time < 500 / portTICK_RATE_MS){}
 80009ee:	bf00      	nop
 80009f0:	f000 fd84 	bl	80014fc <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009fe:	d3f7      	bcc.n	80009f0 <Motor_Task+0x84>
		if (timeCounter % FEEDING_INTERVAL_SECONDS ==0){
 8000a00:	e7b8      	b.n	8000974 <Motor_Task+0x8>
 8000a02:	bf00      	nop
 8000a04:	20000134 	.word	0x20000134
 8000a08:	88888889 	.word	0x88888889
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	200000e4 	.word	0x200000e4

08000a14 <BuzzerTask>:
		}
	}
}

void BuzzerTask(void *pvParameters){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	for(;;){
		if(touch == 1){                                            // eat , reset the counter
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <BuzzerTask+0x38>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d10c      	bne.n	8000a3e <BuzzerTask+0x2a>
			wait_timeCounter = 0;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <BuzzerTask+0x3c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
			touch = 0;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <BuzzerTask+0x38>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
			eat++;
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <BuzzerTask+0x40>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	3301      	adds	r3, #1
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <BuzzerTask+0x40>)
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	e7ee      	b.n	8000a1c <BuzzerTask+0x8>
		}
		else{
			if (wait_timeCounter > WAITING_INTERVAL_SECONDS){      // if not eat within the time we set
 8000a3e:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <BuzzerTask+0x3c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b0a      	cmp	r3, #10
 8000a44:	d9ea      	bls.n	8000a1c <BuzzerTask+0x8>
				Beep();
 8000a46:	f7ff ff65 	bl	8000914 <Beep>
		if(touch == 1){                                            // eat , reset the counter
 8000a4a:	e7e7      	b.n	8000a1c <BuzzerTask+0x8>
 8000a4c:	20000131 	.word	0x20000131
 8000a50:	20000138 	.word	0x20000138
 8000a54:	20000132 	.word	0x20000132

08000a58 <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //  touch pressure sensor
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_5)
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	2b20      	cmp	r3, #32
 8000a66:	d10a      	bne.n	8000a7e <HAL_GPIO_EXTI_Callback+0x26>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);  // yellow light
 8000a68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <HAL_GPIO_EXTI_Callback+0x30>)
 8000a6e:	f001 f824 	bl	8001aba <HAL_GPIO_TogglePin>
		touch = 1;                               // set torch to True(1)
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_GPIO_EXTI_Callback+0x34>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
		wait_timeCounter = 0;                    // reset wait_timeCounter
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
	}
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	20000131 	.word	0x20000131
 8000a90:	20000138 	.word	0x20000138

08000a94 <TimerTask>:

void TimerTask(void *pvParameters)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = pdMS_TO_TICKS(1000); // 1 second as cycle
 8000a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa0:	60fb      	str	r3, [r7, #12]

    // record currnet time
    xLastWakeTime = xTaskGetTickCount();
 8000aa2:	f004 f861 	bl	8004b68 <xTaskGetTickCount>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	60bb      	str	r3, [r7, #8]
    for (;;)
    {
        // wait until next cycle
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	68f9      	ldr	r1, [r7, #12]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f003 feaf 	bl	8004814 <vTaskDelayUntil>
        // update timer
        timeCounter++;
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <TimerTask+0x38>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	4a03      	ldr	r2, [pc, #12]	; (8000acc <TimerTask+0x38>)
 8000abe:	6013      	str	r3, [r2, #0]
        wait_timeCounter++;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <TimerTask+0x3c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	4a02      	ldr	r2, [pc, #8]	; (8000ad0 <TimerTask+0x3c>)
 8000ac8:	6013      	str	r3, [r2, #0]
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000aca:	e7ee      	b.n	8000aaa <TimerTask+0x16>
 8000acc:	20000134 	.word	0x20000134
 8000ad0:	20000138 	.word	0x20000138

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ada:	f000 fcd9 	bl	8001490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ade:	f000 f86b 	bl	8000bb8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae2:	f000 f95b 	bl	8000d9c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ae6:	f000 f8d1 	bl	8000c8c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000aea:	f000 f8fd 	bl	8000ce8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000aee:	f7ff fdef 	bl	80006d0 <lcd_init>

  MsgQueue = xQueueCreate(1,sizeof(unsigned int));
 8000af2:	2200      	movs	r2, #0
 8000af4:	2104      	movs	r1, #4
 8000af6:	2001      	movs	r0, #1
 8000af8:	f003 f90a 	bl	8003d10 <xQueueGenericCreate>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <main+0xac>)
 8000b00:	6013      	str	r3, [r2, #0]
  xTaskCreate(InfraredTask, "InfraredTask", 128, NULL, 1, NULL);   // detect running lap
 8000b02:	2300      	movs	r3, #0
 8000b04:	9301      	str	r3, [sp, #4]
 8000b06:	2301      	movs	r3, #1
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	491d      	ldr	r1, [pc, #116]	; (8000b84 <main+0xb0>)
 8000b10:	481d      	ldr	r0, [pc, #116]	; (8000b88 <main+0xb4>)
 8000b12:	f003 fd41 	bl	8004598 <xTaskCreate>
  xTaskCreate(ButtonTask, "ButtonTask", 128, NULL, 1, NULL);       // switch lcd displaymode
 8000b16:	2300      	movs	r3, #0
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	491a      	ldr	r1, [pc, #104]	; (8000b8c <main+0xb8>)
 8000b24:	481a      	ldr	r0, [pc, #104]	; (8000b90 <main+0xbc>)
 8000b26:	f003 fd37 	bl	8004598 <xTaskCreate>
  xTaskCreate(Display, "Display", 128, NULL, 1, NULL);             // show lcd content
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	9301      	str	r3, [sp, #4]
 8000b2e:	2301      	movs	r3, #1
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2300      	movs	r3, #0
 8000b34:	2280      	movs	r2, #128	; 0x80
 8000b36:	4917      	ldr	r1, [pc, #92]	; (8000b94 <main+0xc0>)
 8000b38:	4817      	ldr	r0, [pc, #92]	; (8000b98 <main+0xc4>)
 8000b3a:	f003 fd2d 	bl	8004598 <xTaskCreate>
  xTaskCreate(BuzzerTask, "BuzzerTask", 128, NULL, 1, NULL);       // sound beep to remind eating
 8000b3e:	2300      	movs	r3, #0
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	2301      	movs	r3, #1
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2300      	movs	r3, #0
 8000b48:	2280      	movs	r2, #128	; 0x80
 8000b4a:	4914      	ldr	r1, [pc, #80]	; (8000b9c <main+0xc8>)
 8000b4c:	4814      	ldr	r0, [pc, #80]	; (8000ba0 <main+0xcc>)
 8000b4e:	f003 fd23 	bl	8004598 <xTaskCreate>
  xTaskCreate(Motor_Task, "Motor_Task", 128, NULL, 1, NULL);       // check if have eaten
 8000b52:	2300      	movs	r3, #0
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	2301      	movs	r3, #1
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	4911      	ldr	r1, [pc, #68]	; (8000ba4 <main+0xd0>)
 8000b60:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <main+0xd4>)
 8000b62:	f003 fd19 	bl	8004598 <xTaskCreate>
  xTaskCreate(TimerTask, "TimerTask", configMINIMAL_STACK_SIZE, NULL, 1, &xTimerTaskHandle);  // Timer
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <main+0xd8>)
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2282      	movs	r2, #130	; 0x82
 8000b72:	490f      	ldr	r1, [pc, #60]	; (8000bb0 <main+0xdc>)
 8000b74:	480f      	ldr	r0, [pc, #60]	; (8000bb4 <main+0xe0>)
 8000b76:	f003 fd0f 	bl	8004598 <xTaskCreate>

  vTaskStartScheduler();
 8000b7a:	f003 fefd 	bl	8004978 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <main+0xaa>
 8000b80:	20000140 	.word	0x20000140
 8000b84:	08006b98 	.word	0x08006b98
 8000b88:	0800074d 	.word	0x0800074d
 8000b8c:	08006ba8 	.word	0x08006ba8
 8000b90:	08000799 	.word	0x08000799
 8000b94:	08006bb4 	.word	0x08006bb4
 8000b98:	08000815 	.word	0x08000815
 8000b9c:	08006bbc 	.word	0x08006bbc
 8000ba0:	08000a15 	.word	0x08000a15
 8000ba4:	08006bc8 	.word	0x08006bc8
 8000ba8:	0800096d 	.word	0x0800096d
 8000bac:	2000013c 	.word	0x2000013c
 8000bb0:	08006bd4 	.word	0x08006bd4
 8000bb4:	08000a95 	.word	0x08000a95

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b094      	sub	sp, #80	; 0x50
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 0320 	add.w	r3, r7, #32
 8000bc2:	2230      	movs	r2, #48	; 0x30
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f005 fb58 	bl	800627c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <SystemClock_Config+0xcc>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	4a27      	ldr	r2, [pc, #156]	; (8000c84 <SystemClock_Config+0xcc>)
 8000be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
 8000bec:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <SystemClock_Config+0xcc>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <SystemClock_Config+0xd0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <SystemClock_Config+0xd0>)
 8000c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <SystemClock_Config+0xd0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c14:	2302      	movs	r3, #2
 8000c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c20:	2302      	movs	r3, #2
 8000c22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c24:	2300      	movs	r3, #0
 8000c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c2c:	2348      	movs	r3, #72	; 0x48
 8000c2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c34:	2307      	movs	r3, #7
 8000c36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c38:	f107 0320 	add.w	r3, r7, #32
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f001 fbbb 	bl	80023b8 <HAL_RCC_OscConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c48:	f000 fa2e 	bl	80010a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c50:	2302      	movs	r3, #2
 8000c52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 fe1c 	bl	80028a8 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c76:	f000 fa17 	bl	80010a8 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	; 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40007000 	.word	0x40007000

08000c8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000c92:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <MX_I2C1_Init+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000c98:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <MX_I2C1_Init+0x58>)
 8000c9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000caa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cca:	f000 ff29 	bl	8001b20 <HAL_I2C_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cd4:	f000 f9e8 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000090 	.word	0x20000090
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	000186a0 	.word	0x000186a0

08000ce8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]
 8000d06:	615a      	str	r2, [r3, #20]
 8000d08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <MX_TIM2_Init+0xb0>)
 8000d0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <MX_TIM2_Init+0xb0>)
 8000d14:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000d18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <MX_TIM2_Init+0xb0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000d20:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_TIM2_Init+0xb0>)
 8000d22:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000d26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_TIM2_Init+0xb0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_TIM2_Init+0xb0>)
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d34:	4818      	ldr	r0, [pc, #96]	; (8000d98 <MX_TIM2_Init+0xb0>)
 8000d36:	f002 f8bf 	bl	8002eb8 <HAL_TIM_PWM_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d40:	f000 f9b2 	bl	80010a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d4c:	f107 0320 	add.w	r3, r7, #32
 8000d50:	4619      	mov	r1, r3
 8000d52:	4811      	ldr	r0, [pc, #68]	; (8000d98 <MX_TIM2_Init+0xb0>)
 8000d54:	f002 fe30 	bl	80039b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d5e:	f000 f9a3 	bl	80010a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d62:	2360      	movs	r3, #96	; 0x60
 8000d64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	220c      	movs	r2, #12
 8000d76:	4619      	mov	r1, r3
 8000d78:	4807      	ldr	r0, [pc, #28]	; (8000d98 <MX_TIM2_Init+0xb0>)
 8000d7a:	f002 fabd 	bl	80032f8 <HAL_TIM_PWM_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000d84:	f000 f990 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d88:	4803      	ldr	r0, [pc, #12]	; (8000d98 <MX_TIM2_Init+0xb0>)
 8000d8a:	f000 fa33 	bl	80011f4 <HAL_TIM_MspPostInit>

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000e4 	.word	0x200000e4

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	4bad      	ldr	r3, [pc, #692]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4aac      	ldr	r2, [pc, #688]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000dbc:	f043 0310 	orr.w	r3, r3, #16
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4baa      	ldr	r3, [pc, #680]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	4ba6      	ldr	r3, [pc, #664]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4aa5      	ldr	r2, [pc, #660]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4ba3      	ldr	r3, [pc, #652]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b9f      	ldr	r3, [pc, #636]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a9e      	ldr	r2, [pc, #632]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b9c      	ldr	r3, [pc, #624]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b98      	ldr	r3, [pc, #608]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a97      	ldr	r2, [pc, #604]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b95      	ldr	r3, [pc, #596]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	4b91      	ldr	r3, [pc, #580]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a90      	ldr	r2, [pc, #576]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b8e      	ldr	r3, [pc, #568]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b8a      	ldr	r3, [pc, #552]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a89      	ldr	r2, [pc, #548]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000e48:	f043 0308 	orr.w	r3, r3, #8
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b87      	ldr	r3, [pc, #540]	; (800106c <MX_GPIO_Init+0x2d0>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2108      	movs	r1, #8
 8000e5e:	4884      	ldr	r0, [pc, #528]	; (8001070 <MX_GPIO_Init+0x2d4>)
 8000e60:	f000 fe12 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2101      	movs	r1, #1
 8000e68:	4882      	ldr	r0, [pc, #520]	; (8001074 <MX_GPIO_Init+0x2d8>)
 8000e6a:	f000 fe0d 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Beep_GPIO_Port, Beep_Pin, GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2102      	movs	r1, #2
 8000e72:	4881      	ldr	r0, [pc, #516]	; (8001078 <MX_GPIO_Init+0x2dc>)
 8000e74:	f000 fe08 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e7e:	487f      	ldr	r0, [pc, #508]	; (800107c <MX_GPIO_Init+0x2e0>)
 8000e80:	f000 fe02 	bl	8001a88 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000e84:	2308      	movs	r3, #8
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4875      	ldr	r0, [pc, #468]	; (8001070 <MX_GPIO_Init+0x2d4>)
 8000e9c:	f000 fc40 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	486f      	ldr	r0, [pc, #444]	; (8001074 <MX_GPIO_Init+0x2d8>)
 8000eb8:	f000 fc32 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ecc:	2305      	movs	r3, #5
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4867      	ldr	r0, [pc, #412]	; (8001074 <MX_GPIO_Init+0x2d8>)
 8000ed8:	f000 fc22 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_blue_Pin */
  GPIO_InitStruct.Pin = btn_blue_Pin;
 8000edc:	2301      	movs	r3, #1
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(btn_blue_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4861      	ldr	r0, [pc, #388]	; (8001078 <MX_GPIO_Init+0x2dc>)
 8000ef2:	f000 fc15 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : Beep_Pin */
  GPIO_InitStruct.Pin = Beep_Pin;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Beep_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	485a      	ldr	r0, [pc, #360]	; (8001078 <MX_GPIO_Init+0x2dc>)
 8000f0e:	f000 fc07 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f12:	2310      	movs	r3, #16
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f22:	2306      	movs	r3, #6
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4852      	ldr	r0, [pc, #328]	; (8001078 <MX_GPIO_Init+0x2dc>)
 8000f2e:	f000 fbf7 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f32:	23e0      	movs	r3, #224	; 0xe0
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f42:	2305      	movs	r3, #5
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	484a      	ldr	r0, [pc, #296]	; (8001078 <MX_GPIO_Init+0x2dc>)
 8000f4e:	f000 fbe7 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f52:	2310      	movs	r3, #16
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	4619      	mov	r1, r3
 8000f64:	4843      	ldr	r0, [pc, #268]	; (8001074 <MX_GPIO_Init+0x2d8>)
 8000f66:	f000 fbdb 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f6a:	2320      	movs	r3, #32
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	483d      	ldr	r0, [pc, #244]	; (8001074 <MX_GPIO_Init+0x2d8>)
 8000f80:	f000 fbce 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 BOOT1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|BOOT1_Pin;
 8000f84:	2307      	movs	r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	483a      	ldr	r0, [pc, #232]	; (8001080 <MX_GPIO_Init+0x2e4>)
 8000f98:	f000 fbc2 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000f9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fae:	2305      	movs	r3, #5
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4831      	ldr	r0, [pc, #196]	; (8001080 <MX_GPIO_Init+0x2e4>)
 8000fba:	f000 fbb1 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fbe:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000fc2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4829      	ldr	r0, [pc, #164]	; (800107c <MX_GPIO_Init+0x2e0>)
 8000fd8:	f000 fba2 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000fdc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fee:	2306      	movs	r3, #6
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481e      	ldr	r0, [pc, #120]	; (8001074 <MX_GPIO_Init+0x2d8>)
 8000ffa:	f000 fb91 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	4819      	ldr	r0, [pc, #100]	; (8001078 <MX_GPIO_Init+0x2dc>)
 8001014:	f000 fb84 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001018:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800102a:	230a      	movs	r3, #10
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	4810      	ldr	r0, [pc, #64]	; (8001078 <MX_GPIO_Init+0x2dc>)
 8001036:	f000 fb73 	bl	8001720 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800103a:	2320      	movs	r3, #32
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	480b      	ldr	r0, [pc, #44]	; (800107c <MX_GPIO_Init+0x2e0>)
 800104e:	f000 fb67 	bl	8001720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	2017      	movs	r0, #23
 8001058:	f000 fb38 	bl	80016cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800105c:	2017      	movs	r0, #23
 800105e:	f000 fb51 	bl	8001704 <HAL_NVIC_EnableIRQ>

}
 8001062:	bf00      	nop
 8001064:	3730      	adds	r7, #48	; 0x30
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40021000 	.word	0x40021000
 8001074:	40020800 	.word	0x40020800
 8001078:	40020000 	.word	0x40020000
 800107c:	40020c00 	.word	0x40020c00
 8001080:	40020400 	.word	0x40020400

08001084 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001096:	f000 fa1d 	bl	80014d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40001400 	.word	0x40001400

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <Error_Handler+0x8>
	...

080010b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <HAL_MspInit+0x4c>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_MspInit+0x4c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_MspInit+0x4c>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_MspInit+0x4c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800

08001104 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <HAL_I2C_MspInit+0xa4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d13c      	bne.n	80011a0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <HAL_I2C_MspInit+0xa8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <HAL_I2C_MspInit+0xa8>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_I2C_MspInit+0xa8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin;
 8001142:	2340      	movs	r3, #64	; 0x40
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001146:	2312      	movs	r3, #18
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001152:	2304      	movs	r3, #4
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Audio_SCL_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4814      	ldr	r0, [pc, #80]	; (80011b0 <HAL_I2C_MspInit+0xac>)
 800115e:	f000 fadf 	bl	8001720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001168:	2312      	movs	r3, #18
 800116a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001174:	2304      	movs	r3, #4
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <HAL_I2C_MspInit+0xac>)
 8001180:	f000 face 	bl	8001720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_I2C_MspInit+0xa8>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_I2C_MspInit+0xa8>)
 800118e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001192:	6413      	str	r3, [r2, #64]	; 0x40
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_I2C_MspInit+0xa8>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40005400 	.word	0x40005400
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020400 	.word	0x40020400

080011b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c4:	d10d      	bne.n	80011e2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001214:	d11d      	bne.n	8001252 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_TIM_MspPostInit+0x68>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a0f      	ldr	r2, [pc, #60]	; (800125c <HAL_TIM_MspPostInit+0x68>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <HAL_TIM_MspPostInit+0x68>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001232:	2308      	movs	r3, #8
 8001234:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001242:	2301      	movs	r3, #1
 8001244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	4619      	mov	r1, r3
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <HAL_TIM_MspPostInit+0x6c>)
 800124e:	f000 fa67 	bl	8001720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000

08001264 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08e      	sub	sp, #56	; 0x38
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	4b33      	ldr	r3, [pc, #204]	; (8001348 <HAL_InitTick+0xe4>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	4a32      	ldr	r2, [pc, #200]	; (8001348 <HAL_InitTick+0xe4>)
 800127e:	f043 0320 	orr.w	r3, r3, #32
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_InitTick+0xe4>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f003 0320 	and.w	r3, r3, #32
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001290:	f107 0210 	add.w	r2, r7, #16
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fd10 	bl	8002cc0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d103      	bne.n	80012b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012aa:	f001 fcf5 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 80012ae:	6378      	str	r0, [r7, #52]	; 0x34
 80012b0:	e004      	b.n	80012bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012b2:	f001 fcf1 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 80012b6:	4603      	mov	r3, r0
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012be:	4a23      	ldr	r2, [pc, #140]	; (800134c <HAL_InitTick+0xe8>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	0c9b      	lsrs	r3, r3, #18
 80012c6:	3b01      	subs	r3, #1
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80012ca:	4b21      	ldr	r3, [pc, #132]	; (8001350 <HAL_InitTick+0xec>)
 80012cc:	4a21      	ldr	r2, [pc, #132]	; (8001354 <HAL_InitTick+0xf0>)
 80012ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <HAL_InitTick+0xec>)
 80012d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012d6:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80012d8:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <HAL_InitTick+0xec>)
 80012da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012dc:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <HAL_InitTick+0xec>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <HAL_InitTick+0xec>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <HAL_InitTick+0xec>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80012f0:	4817      	ldr	r0, [pc, #92]	; (8001350 <HAL_InitTick+0xec>)
 80012f2:	f001 fd17 	bl	8002d24 <HAL_TIM_Base_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80012fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001300:	2b00      	cmp	r3, #0
 8001302:	d11b      	bne.n	800133c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001304:	4812      	ldr	r0, [pc, #72]	; (8001350 <HAL_InitTick+0xec>)
 8001306:	f001 fd67 	bl	8002dd8 <HAL_TIM_Base_Start_IT>
 800130a:	4603      	mov	r3, r0
 800130c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001310:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001314:	2b00      	cmp	r3, #0
 8001316:	d111      	bne.n	800133c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001318:	2037      	movs	r0, #55	; 0x37
 800131a:	f000 f9f3 	bl	8001704 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d808      	bhi.n	8001336 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	2037      	movs	r0, #55	; 0x37
 800132a:	f000 f9cf 	bl	80016cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_InitTick+0xf4>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e002      	b.n	800133c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800133c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001340:	4618      	mov	r0, r3
 8001342:	3738      	adds	r7, #56	; 0x38
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	431bde83 	.word	0x431bde83
 8001350:	20000144 	.word	0x20000144
 8001354:	40001400 	.word	0x40001400
 8001358:	20000004 	.word	0x20000004

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <NMI_Handler+0x4>

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800138c:	2020      	movs	r0, #32
 800138e:	f000 fbaf 	bl	8001af0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <TIM7_IRQHandler+0x10>)
 800139e:	f001 fea3 	bl	80030e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000144 	.word	0x20000144

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f004 ff16 	bl	800620c <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20020000 	.word	0x20020000
 800140c:	00000400 	.word	0x00000400
 8001410:	2000018c 	.word	0x2000018c
 8001414:	20012f48 	.word	0x20012f48

08001418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <Reset_Handler>:
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001474 <LoopFillZerobss+0x12>
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <LoopFillZerobss+0x16>)
 8001442:	490e      	ldr	r1, [pc, #56]	; (800147c <LoopFillZerobss+0x1a>)
 8001444:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <LoopFillZerobss+0x1e>)
 8001446:	2300      	movs	r3, #0
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:
 800144a:	58d4      	ldr	r4, [r2, r3]
 800144c:	50c4      	str	r4, [r0, r3]
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:
 8001450:	18c4      	adds	r4, r0, r3
 8001452:	428c      	cmp	r4, r1
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <LoopFillZerobss+0x22>)
 8001458:	4c0b      	ldr	r4, [pc, #44]	; (8001488 <LoopFillZerobss+0x26>)
 800145a:	2300      	movs	r3, #0
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:
 8001462:	42a2      	cmp	r2, r4
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>
 8001466:	f7ff ffd7 	bl	8001418 <SystemInit>
 800146a:	f004 fed5 	bl	8006218 <__libc_init_array>
 800146e:	f7ff fb31 	bl	8000ad4 <main>
 8001472:	4770      	bx	lr
 8001474:	20020000 	.word	0x20020000
 8001478:	20000000 	.word	0x20000000
 800147c:	20000074 	.word	0x20000074
 8001480:	08006c54 	.word	0x08006c54
 8001484:	20000074 	.word	0x20000074
 8001488:	20012f44 	.word	0x20012f44

0800148c <ADC_IRQHandler>:
 800148c:	e7fe      	b.n	800148c <ADC_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <HAL_Init+0x40>)
 800149a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_Init+0x40>)
 80014a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_Init+0x40>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_Init+0x40>)
 80014b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f8fc 	bl	80016b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	200f      	movs	r0, #15
 80014c0:	f7ff fed0 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f7ff fdf6 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023c00 	.word	0x40023c00

080014d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x20>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x24>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <HAL_IncTick+0x24>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000008 	.word	0x20000008
 80014f8:	20000190 	.word	0x20000190

080014fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_GetTick+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000190 	.word	0x20000190

08001514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff ffee 	bl	80014fc <HAL_GetTick>
 8001520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800152c:	d005      	beq.n	800153a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_Delay+0x44>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800153a:	bf00      	nop
 800153c:	f7ff ffde 	bl	80014fc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	429a      	cmp	r2, r3
 800154a:	d8f7      	bhi.n	800153c <HAL_Delay+0x28>
  {
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008

0800155c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <__NVIC_GetPriorityGrouping+0x18>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 0307 	and.w	r3, r3, #7
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db0b      	blt.n	80015ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 021f 	and.w	r2, r3, #31
 80015d8:	4907      	ldr	r1, [pc, #28]	; (80015f8 <__NVIC_EnableIRQ+0x38>)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2001      	movs	r0, #1
 80015e2:	fa00 f202 	lsl.w	r2, r0, r2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ff4c 	bl	800155c <__NVIC_SetPriorityGrouping>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016de:	f7ff ff61 	bl	80015a4 <__NVIC_GetPriorityGrouping>
 80016e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	6978      	ldr	r0, [r7, #20]
 80016ea:	f7ff ffb1 	bl	8001650 <NVIC_EncodePriority>
 80016ee:	4602      	mov	r2, r0
 80016f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff80 	bl	80015fc <__NVIC_SetPriority>
}
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff54 	bl	80015c0 <__NVIC_EnableIRQ>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	; 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	e16b      	b.n	8001a14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800173c:	2201      	movs	r2, #1
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	429a      	cmp	r2, r3
 8001756:	f040 815a 	bne.w	8001a0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b01      	cmp	r3, #1
 8001764:	d005      	beq.n	8001772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176e:	2b02      	cmp	r3, #2
 8001770:	d130      	bne.n	80017d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a8:	2201      	movs	r2, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 0201 	and.w	r2, r3, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d017      	beq.n	8001810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d123      	bne.n	8001864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	08da      	lsrs	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3208      	adds	r2, #8
 800185e:	69b9      	ldr	r1, [r7, #24]
 8001860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80b4 	beq.w	8001a0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b60      	ldr	r3, [pc, #384]	; (8001a2c <HAL_GPIO_Init+0x30c>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a5f      	ldr	r2, [pc, #380]	; (8001a2c <HAL_GPIO_Init+0x30c>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <HAL_GPIO_Init+0x30c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c2:	4a5b      	ldr	r2, [pc, #364]	; (8001a30 <HAL_GPIO_Init+0x310>)
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	220f      	movs	r2, #15
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a52      	ldr	r2, [pc, #328]	; (8001a34 <HAL_GPIO_Init+0x314>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d02b      	beq.n	8001946 <HAL_GPIO_Init+0x226>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a51      	ldr	r2, [pc, #324]	; (8001a38 <HAL_GPIO_Init+0x318>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d025      	beq.n	8001942 <HAL_GPIO_Init+0x222>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a50      	ldr	r2, [pc, #320]	; (8001a3c <HAL_GPIO_Init+0x31c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d01f      	beq.n	800193e <HAL_GPIO_Init+0x21e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4f      	ldr	r2, [pc, #316]	; (8001a40 <HAL_GPIO_Init+0x320>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d019      	beq.n	800193a <HAL_GPIO_Init+0x21a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4e      	ldr	r2, [pc, #312]	; (8001a44 <HAL_GPIO_Init+0x324>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0x216>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4d      	ldr	r2, [pc, #308]	; (8001a48 <HAL_GPIO_Init+0x328>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00d      	beq.n	8001932 <HAL_GPIO_Init+0x212>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4c      	ldr	r2, [pc, #304]	; (8001a4c <HAL_GPIO_Init+0x32c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0x20e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4b      	ldr	r2, [pc, #300]	; (8001a50 <HAL_GPIO_Init+0x330>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_GPIO_Init+0x20a>
 8001926:	2307      	movs	r3, #7
 8001928:	e00e      	b.n	8001948 <HAL_GPIO_Init+0x228>
 800192a:	2308      	movs	r3, #8
 800192c:	e00c      	b.n	8001948 <HAL_GPIO_Init+0x228>
 800192e:	2306      	movs	r3, #6
 8001930:	e00a      	b.n	8001948 <HAL_GPIO_Init+0x228>
 8001932:	2305      	movs	r3, #5
 8001934:	e008      	b.n	8001948 <HAL_GPIO_Init+0x228>
 8001936:	2304      	movs	r3, #4
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x228>
 800193a:	2303      	movs	r3, #3
 800193c:	e004      	b.n	8001948 <HAL_GPIO_Init+0x228>
 800193e:	2302      	movs	r3, #2
 8001940:	e002      	b.n	8001948 <HAL_GPIO_Init+0x228>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_GPIO_Init+0x228>
 8001946:	2300      	movs	r3, #0
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	f002 0203 	and.w	r2, r2, #3
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4093      	lsls	r3, r2
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001958:	4935      	ldr	r1, [pc, #212]	; (8001a30 <HAL_GPIO_Init+0x310>)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001966:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_GPIO_Init+0x334>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800198a:	4a32      	ldr	r2, [pc, #200]	; (8001a54 <HAL_GPIO_Init+0x334>)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001990:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <HAL_GPIO_Init+0x334>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019b4:	4a27      	ldr	r2, [pc, #156]	; (8001a54 <HAL_GPIO_Init+0x334>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_GPIO_Init+0x334>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019de:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_GPIO_Init+0x334>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <HAL_GPIO_Init+0x334>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a08:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <HAL_GPIO_Init+0x334>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3301      	adds	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	2b0f      	cmp	r3, #15
 8001a18:	f67f ae90 	bls.w	800173c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40013800 	.word	0x40013800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40021400 	.word	0x40021400
 8001a4c:	40021800 	.word	0x40021800
 8001a50:	40021c00 	.word	0x40021c00
 8001a54:	40013c00 	.word	0x40013c00

08001a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e001      	b.n	8001a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001acc:	887a      	ldrh	r2, [r7, #2]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	041a      	lsls	r2, r3, #16
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	887b      	ldrh	r3, [r7, #2]
 8001ada:	400b      	ands	r3, r1
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	619a      	str	r2, [r3, #24]
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001afc:	695a      	ldr	r2, [r3, #20]
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe ffa2 	bl	8000a58 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40013c00 	.word	0x40013c00

08001b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e12b      	b.n	8001d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fadc 	bl	8001104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2224      	movs	r2, #36	; 0x24
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b84:	f001 f888 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 8001b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a81      	ldr	r2, [pc, #516]	; (8001d94 <HAL_I2C_Init+0x274>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d807      	bhi.n	8001ba4 <HAL_I2C_Init+0x84>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4a80      	ldr	r2, [pc, #512]	; (8001d98 <HAL_I2C_Init+0x278>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	bf94      	ite	ls
 8001b9c:	2301      	movls	r3, #1
 8001b9e:	2300      	movhi	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	e006      	b.n	8001bb2 <HAL_I2C_Init+0x92>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4a7d      	ldr	r2, [pc, #500]	; (8001d9c <HAL_I2C_Init+0x27c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	bf94      	ite	ls
 8001bac:	2301      	movls	r3, #1
 8001bae:	2300      	movhi	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0e7      	b.n	8001d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4a78      	ldr	r2, [pc, #480]	; (8001da0 <HAL_I2C_Init+0x280>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	0c9b      	lsrs	r3, r3, #18
 8001bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4a6a      	ldr	r2, [pc, #424]	; (8001d94 <HAL_I2C_Init+0x274>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d802      	bhi.n	8001bf4 <HAL_I2C_Init+0xd4>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	e009      	b.n	8001c08 <HAL_I2C_Init+0xe8>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	4a69      	ldr	r2, [pc, #420]	; (8001da4 <HAL_I2C_Init+0x284>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	3301      	adds	r3, #1
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	495c      	ldr	r1, [pc, #368]	; (8001d94 <HAL_I2C_Init+0x274>)
 8001c24:	428b      	cmp	r3, r1
 8001c26:	d819      	bhi.n	8001c5c <HAL_I2C_Init+0x13c>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1e59      	subs	r1, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c36:	1c59      	adds	r1, r3, #1
 8001c38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c3c:	400b      	ands	r3, r1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00a      	beq.n	8001c58 <HAL_I2C_Init+0x138>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1e59      	subs	r1, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c56:	e051      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001c58:	2304      	movs	r3, #4
 8001c5a:	e04f      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d111      	bne.n	8001c88 <HAL_I2C_Init+0x168>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1e58      	subs	r0, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	440b      	add	r3, r1
 8001c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c76:	3301      	adds	r3, #1
 8001c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	e012      	b.n	8001cae <HAL_I2C_Init+0x18e>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1e58      	subs	r0, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	0099      	lsls	r1, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_I2C_Init+0x196>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e022      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10e      	bne.n	8001cdc <HAL_I2C_Init+0x1bc>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1e58      	subs	r0, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	440b      	add	r3, r1
 8001ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cda:	e00f      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e58      	subs	r0, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	0099      	lsls	r1, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	6809      	ldr	r1, [r1, #0]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6911      	ldr	r1, [r2, #16]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68d2      	ldr	r2, [r2, #12]
 8001d36:	4311      	orrs	r1, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	000186a0 	.word	0x000186a0
 8001d98:	001e847f 	.word	0x001e847f
 8001d9c:	003d08ff 	.word	0x003d08ff
 8001da0:	431bde83 	.word	0x431bde83
 8001da4:	10624dd3 	.word	0x10624dd3

08001da8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	460b      	mov	r3, r1
 8001db6:	817b      	strh	r3, [r7, #10]
 8001db8:	4613      	mov	r3, r2
 8001dba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff fb9e 	bl	80014fc <HAL_GetTick>
 8001dc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	f040 80e0 	bne.w	8001f90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2319      	movs	r3, #25
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4970      	ldr	r1, [pc, #448]	; (8001f9c <HAL_I2C_Master_Transmit+0x1f4>)
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f964 	bl	80020a8 <I2C_WaitOnFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001de6:	2302      	movs	r3, #2
 8001de8:	e0d3      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_I2C_Master_Transmit+0x50>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e0cc      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d007      	beq.n	8001e1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2221      	movs	r2, #33	; 0x21
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2210      	movs	r2, #16
 8001e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	893a      	ldrh	r2, [r7, #8]
 8001e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e60:	8979      	ldrh	r1, [r7, #10]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	6a3a      	ldr	r2, [r7, #32]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 f89c 	bl	8001fa4 <I2C_MasterRequestWrite>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e08d      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e8c:	e066      	b.n	8001f5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	6a39      	ldr	r1, [r7, #32]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f9de 	bl	8002254 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00d      	beq.n	8001eba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d107      	bne.n	8001eb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e06b      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d11b      	bne.n	8001f30 <HAL_I2C_Master_Transmit+0x188>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d017      	beq.n	8001f30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	781a      	ldrb	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	6a39      	ldr	r1, [r7, #32]
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 f9ce 	bl	80022d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d107      	bne.n	8001f58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e01a      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d194      	bne.n	8001e8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	00100002 	.word	0x00100002
 8001fa0:	ffff0000 	.word	0xffff0000

08001fa4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d006      	beq.n	8001fce <I2C_MasterRequestWrite+0x2a>
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d003      	beq.n	8001fce <I2C_MasterRequestWrite+0x2a>
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fcc:	d108      	bne.n	8001fe0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	e00b      	b.n	8001ff8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	2b12      	cmp	r3, #18
 8001fe6:	d107      	bne.n	8001ff8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ff6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f84f 	bl	80020a8 <I2C_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800201e:	d103      	bne.n	8002028 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e035      	b.n	8002098 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002034:	d108      	bne.n	8002048 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002036:	897b      	ldrh	r3, [r7, #10]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002044:	611a      	str	r2, [r3, #16]
 8002046:	e01b      	b.n	8002080 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002048:	897b      	ldrh	r3, [r7, #10]
 800204a:	11db      	asrs	r3, r3, #7
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f003 0306 	and.w	r3, r3, #6
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f063 030f 	orn	r3, r3, #15
 8002058:	b2da      	uxtb	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	490e      	ldr	r1, [pc, #56]	; (80020a0 <I2C_MasterRequestWrite+0xfc>)
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f875 	bl	8002156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e010      	b.n	8002098 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002076:	897b      	ldrh	r3, [r7, #10]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4907      	ldr	r1, [pc, #28]	; (80020a4 <I2C_MasterRequestWrite+0x100>)
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f865 	bl	8002156 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	00010008 	.word	0x00010008
 80020a4:	00010002 	.word	0x00010002

080020a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020b8:	e025      	b.n	8002106 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020c0:	d021      	beq.n	8002106 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c2:	f7ff fa1b 	bl	80014fc <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d302      	bcc.n	80020d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d116      	bne.n	8002106 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f043 0220 	orr.w	r2, r3, #32
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e023      	b.n	800214e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	0c1b      	lsrs	r3, r3, #16
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d10d      	bne.n	800212c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4013      	ands	r3, r2
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf0c      	ite	eq
 8002122:	2301      	moveq	r3, #1
 8002124:	2300      	movne	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	e00c      	b.n	8002146 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4013      	ands	r3, r2
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	429a      	cmp	r2, r3
 800214a:	d0b6      	beq.n	80020ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002164:	e051      	b.n	800220a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002174:	d123      	bne.n	80021be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002184:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800218e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f043 0204 	orr.w	r2, r3, #4
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e046      	b.n	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021c4:	d021      	beq.n	800220a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c6:	f7ff f999 	bl	80014fc <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d302      	bcc.n	80021dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d116      	bne.n	800220a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f043 0220 	orr.w	r2, r3, #32
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e020      	b.n	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	0c1b      	lsrs	r3, r3, #16
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b01      	cmp	r3, #1
 8002212:	d10c      	bne.n	800222e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4013      	ands	r3, r2
 8002220:	b29b      	uxth	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf14      	ite	ne
 8002226:	2301      	movne	r3, #1
 8002228:	2300      	moveq	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	e00b      	b.n	8002246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	43da      	mvns	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	4013      	ands	r3, r2
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	bf14      	ite	ne
 8002240:	2301      	movne	r3, #1
 8002242:	2300      	moveq	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d18d      	bne.n	8002166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002260:	e02d      	b.n	80022be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f878 	bl	8002358 <I2C_IsAcknowledgeFailed>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e02d      	b.n	80022ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002278:	d021      	beq.n	80022be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227a:	f7ff f93f 	bl	80014fc <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	429a      	cmp	r2, r3
 8002288:	d302      	bcc.n	8002290 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d116      	bne.n	80022be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2220      	movs	r2, #32
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f043 0220 	orr.w	r2, r3, #32
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e007      	b.n	80022ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c8:	2b80      	cmp	r3, #128	; 0x80
 80022ca:	d1ca      	bne.n	8002262 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022e2:	e02d      	b.n	8002340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 f837 	bl	8002358 <I2C_IsAcknowledgeFailed>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e02d      	b.n	8002350 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022fa:	d021      	beq.n	8002340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fc:	f7ff f8fe 	bl	80014fc <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	429a      	cmp	r2, r3
 800230a:	d302      	bcc.n	8002312 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f043 0220 	orr.w	r2, r3, #32
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e007      	b.n	8002350 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b04      	cmp	r3, #4
 800234c:	d1ca      	bne.n	80022e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236e:	d11b      	bne.n	80023a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002378:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f043 0204 	orr.w	r2, r3, #4
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e000      	b.n	80023aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e267      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d075      	beq.n	80024c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023d6:	4b88      	ldr	r3, [pc, #544]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d00c      	beq.n	80023fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023e2:	4b85      	ldr	r3, [pc, #532]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d112      	bne.n	8002414 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ee:	4b82      	ldr	r3, [pc, #520]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023fa:	d10b      	bne.n	8002414 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	4b7e      	ldr	r3, [pc, #504]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d05b      	beq.n	80024c0 <HAL_RCC_OscConfig+0x108>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d157      	bne.n	80024c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e242      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800241c:	d106      	bne.n	800242c <HAL_RCC_OscConfig+0x74>
 800241e:	4b76      	ldr	r3, [pc, #472]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a75      	ldr	r2, [pc, #468]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e01d      	b.n	8002468 <HAL_RCC_OscConfig+0xb0>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x98>
 8002436:	4b70      	ldr	r3, [pc, #448]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a6f      	ldr	r2, [pc, #444]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 800243c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b6d      	ldr	r3, [pc, #436]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a6c      	ldr	r2, [pc, #432]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e00b      	b.n	8002468 <HAL_RCC_OscConfig+0xb0>
 8002450:	4b69      	ldr	r3, [pc, #420]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a68      	ldr	r2, [pc, #416]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	4b66      	ldr	r3, [pc, #408]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a65      	ldr	r2, [pc, #404]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d013      	beq.n	8002498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7ff f844 	bl	80014fc <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002478:	f7ff f840 	bl	80014fc <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e207      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b5b      	ldr	r3, [pc, #364]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0xc0>
 8002496:	e014      	b.n	80024c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7ff f830 	bl	80014fc <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a0:	f7ff f82c 	bl	80014fc <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e1f3      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b2:	4b51      	ldr	r3, [pc, #324]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0xe8>
 80024be:	e000      	b.n	80024c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d063      	beq.n	8002596 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ce:	4b4a      	ldr	r3, [pc, #296]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024da:	4b47      	ldr	r3, [pc, #284]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d11c      	bne.n	8002520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024e6:	4b44      	ldr	r3, [pc, #272]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d116      	bne.n	8002520 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f2:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_RCC_OscConfig+0x152>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d001      	beq.n	800250a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e1c7      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250a:	4b3b      	ldr	r3, [pc, #236]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4937      	ldr	r1, [pc, #220]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	e03a      	b.n	8002596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d020      	beq.n	800256a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002528:	4b34      	ldr	r3, [pc, #208]	; (80025fc <HAL_RCC_OscConfig+0x244>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7fe ffe5 	bl	80014fc <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002536:	f7fe ffe1 	bl	80014fc <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e1a8      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	4b28      	ldr	r3, [pc, #160]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4925      	ldr	r1, [pc, #148]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]
 8002568:	e015      	b.n	8002596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256a:	4b24      	ldr	r3, [pc, #144]	; (80025fc <HAL_RCC_OscConfig+0x244>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7fe ffc4 	bl	80014fc <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002578:	f7fe ffc0 	bl	80014fc <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e187      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258a:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d036      	beq.n	8002610 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d016      	beq.n	80025d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <HAL_RCC_OscConfig+0x248>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7fe ffa4 	bl	80014fc <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025b8:	f7fe ffa0 	bl	80014fc <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e167      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_RCC_OscConfig+0x240>)
 80025cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x200>
 80025d6:	e01b      	b.n	8002610 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d8:	4b09      	ldr	r3, [pc, #36]	; (8002600 <HAL_RCC_OscConfig+0x248>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025de:	f7fe ff8d 	bl	80014fc <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	e00e      	b.n	8002604 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e6:	f7fe ff89 	bl	80014fc <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d907      	bls.n	8002604 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e150      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
 80025f8:	40023800 	.word	0x40023800
 80025fc:	42470000 	.word	0x42470000
 8002600:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	4b88      	ldr	r3, [pc, #544]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 8002606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1ea      	bne.n	80025e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8097 	beq.w	800274c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002622:	4b81      	ldr	r3, [pc, #516]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10f      	bne.n	800264e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	4b7d      	ldr	r3, [pc, #500]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	4a7c      	ldr	r2, [pc, #496]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 8002638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263c:	6413      	str	r3, [r2, #64]	; 0x40
 800263e:	4b7a      	ldr	r3, [pc, #488]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264a:	2301      	movs	r3, #1
 800264c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264e:	4b77      	ldr	r3, [pc, #476]	; (800282c <HAL_RCC_OscConfig+0x474>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d118      	bne.n	800268c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265a:	4b74      	ldr	r3, [pc, #464]	; (800282c <HAL_RCC_OscConfig+0x474>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a73      	ldr	r2, [pc, #460]	; (800282c <HAL_RCC_OscConfig+0x474>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002666:	f7fe ff49 	bl	80014fc <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266e:	f7fe ff45 	bl	80014fc <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e10c      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002680:	4b6a      	ldr	r3, [pc, #424]	; (800282c <HAL_RCC_OscConfig+0x474>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0x2ea>
 8002694:	4b64      	ldr	r3, [pc, #400]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	4a63      	ldr	r2, [pc, #396]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6713      	str	r3, [r2, #112]	; 0x70
 80026a0:	e01c      	b.n	80026dc <HAL_RCC_OscConfig+0x324>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x30c>
 80026aa:	4b5f      	ldr	r3, [pc, #380]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	4a5e      	ldr	r2, [pc, #376]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	6713      	str	r3, [r2, #112]	; 0x70
 80026b6:	4b5c      	ldr	r3, [pc, #368]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a5b      	ldr	r2, [pc, #364]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70
 80026c2:	e00b      	b.n	80026dc <HAL_RCC_OscConfig+0x324>
 80026c4:	4b58      	ldr	r3, [pc, #352]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	4a57      	ldr	r2, [pc, #348]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	6713      	str	r3, [r2, #112]	; 0x70
 80026d0:	4b55      	ldr	r3, [pc, #340]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a54      	ldr	r2, [pc, #336]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 80026d6:	f023 0304 	bic.w	r3, r3, #4
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d015      	beq.n	8002710 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7fe ff0a 	bl	80014fc <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7fe ff06 	bl	80014fc <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0cb      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002702:	4b49      	ldr	r3, [pc, #292]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0ee      	beq.n	80026ec <HAL_RCC_OscConfig+0x334>
 800270e:	e014      	b.n	800273a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002710:	f7fe fef4 	bl	80014fc <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fe fef0 	bl	80014fc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	; 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e0b5      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272e:	4b3e      	ldr	r3, [pc, #248]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1ee      	bne.n	8002718 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d105      	bne.n	800274c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002740:	4b39      	ldr	r3, [pc, #228]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	4a38      	ldr	r2, [pc, #224]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 8002746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80a1 	beq.w	8002898 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002756:	4b34      	ldr	r3, [pc, #208]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b08      	cmp	r3, #8
 8002760:	d05c      	beq.n	800281c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d141      	bne.n	80027ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276a:	4b31      	ldr	r3, [pc, #196]	; (8002830 <HAL_RCC_OscConfig+0x478>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7fe fec4 	bl	80014fc <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002778:	f7fe fec0 	bl	80014fc <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e087      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278a:	4b27      	ldr	r3, [pc, #156]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	019b      	lsls	r3, r3, #6
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	085b      	lsrs	r3, r3, #1
 80027ae:	3b01      	subs	r3, #1
 80027b0:	041b      	lsls	r3, r3, #16
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	061b      	lsls	r3, r3, #24
 80027ba:	491b      	ldr	r1, [pc, #108]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_RCC_OscConfig+0x478>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7fe fe99 	bl	80014fc <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ce:	f7fe fe95 	bl	80014fc <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e05c      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x416>
 80027ec:	e054      	b.n	8002898 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_RCC_OscConfig+0x478>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe fe82 	bl	80014fc <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fc:	f7fe fe7e 	bl	80014fc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e045      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_RCC_OscConfig+0x470>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x444>
 800281a:	e03d      	b.n	8002898 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d107      	bne.n	8002834 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e038      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
 8002828:	40023800 	.word	0x40023800
 800282c:	40007000 	.word	0x40007000
 8002830:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <HAL_RCC_OscConfig+0x4ec>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d028      	beq.n	8002894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d121      	bne.n	8002894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d11a      	bne.n	8002894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002864:	4013      	ands	r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800286a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800286c:	4293      	cmp	r3, r2
 800286e:	d111      	bne.n	8002894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	085b      	lsrs	r3, r3, #1
 800287c:	3b01      	subs	r3, #1
 800287e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002880:	429a      	cmp	r2, r3
 8002882:	d107      	bne.n	8002894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3718      	adds	r7, #24
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800

080028a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0cc      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028bc:	4b68      	ldr	r3, [pc, #416]	; (8002a60 <HAL_RCC_ClockConfig+0x1b8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d90c      	bls.n	80028e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b65      	ldr	r3, [pc, #404]	; (8002a60 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b63      	ldr	r3, [pc, #396]	; (8002a60 <HAL_RCC_ClockConfig+0x1b8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0b8      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d020      	beq.n	8002932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028fc:	4b59      	ldr	r3, [pc, #356]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4a58      	ldr	r2, [pc, #352]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002914:	4b53      	ldr	r3, [pc, #332]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a52      	ldr	r2, [pc, #328]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800291e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002920:	4b50      	ldr	r3, [pc, #320]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	494d      	ldr	r1, [pc, #308]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d044      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	4b47      	ldr	r3, [pc, #284]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d119      	bne.n	8002986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e07f      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d003      	beq.n	8002966 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002962:	2b03      	cmp	r3, #3
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002966:	4b3f      	ldr	r3, [pc, #252]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e06f      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002976:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e067      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002986:	4b37      	ldr	r3, [pc, #220]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f023 0203 	bic.w	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4934      	ldr	r1, [pc, #208]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	4313      	orrs	r3, r2
 8002996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002998:	f7fe fdb0 	bl	80014fc <HAL_GetTick>
 800299c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a0:	f7fe fdac 	bl	80014fc <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e04f      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	4b2b      	ldr	r3, [pc, #172]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 020c 	and.w	r2, r3, #12
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d1eb      	bne.n	80029a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029c8:	4b25      	ldr	r3, [pc, #148]	; (8002a60 <HAL_RCC_ClockConfig+0x1b8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d20c      	bcs.n	80029f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d6:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <HAL_RCC_ClockConfig+0x1b8>)
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <HAL_RCC_ClockConfig+0x1b8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e032      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4916      	ldr	r1, [pc, #88]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d009      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	490e      	ldr	r1, [pc, #56]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a2e:	f000 f821 	bl	8002a74 <HAL_RCC_GetSysClockFreq>
 8002a32:	4602      	mov	r2, r0
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	490a      	ldr	r1, [pc, #40]	; (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	5ccb      	ldrb	r3, [r1, r3]
 8002a42:	fa22 f303 	lsr.w	r3, r2, r3
 8002a46:	4a09      	ldr	r2, [pc, #36]	; (8002a6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fc08 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40023c00 	.word	0x40023c00
 8002a64:	40023800 	.word	0x40023800
 8002a68:	08006bf8 	.word	0x08006bf8
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	20000004 	.word	0x20000004

08002a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a78:	b094      	sub	sp, #80	; 0x50
 8002a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a80:	2300      	movs	r3, #0
 8002a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a84:	2300      	movs	r3, #0
 8002a86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a8c:	4b79      	ldr	r3, [pc, #484]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d00d      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	f200 80e1 	bhi.w	8002c60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d003      	beq.n	8002aae <HAL_RCC_GetSysClockFreq+0x3a>
 8002aa6:	e0db      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aa8:	4b73      	ldr	r3, [pc, #460]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aaa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002aac:	e0db      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aae:	4b73      	ldr	r3, [pc, #460]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x208>)
 8002ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ab2:	e0d8      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ab4:	4b6f      	ldr	r3, [pc, #444]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002abc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002abe:	4b6d      	ldr	r3, [pc, #436]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d063      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aca:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	099b      	lsrs	r3, r3, #6
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ad4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002adc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ade:	2300      	movs	r3, #0
 8002ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ae2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ae6:	4622      	mov	r2, r4
 8002ae8:	462b      	mov	r3, r5
 8002aea:	f04f 0000 	mov.w	r0, #0
 8002aee:	f04f 0100 	mov.w	r1, #0
 8002af2:	0159      	lsls	r1, r3, #5
 8002af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af8:	0150      	lsls	r0, r2, #5
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4621      	mov	r1, r4
 8002b00:	1a51      	subs	r1, r2, r1
 8002b02:	6139      	str	r1, [r7, #16]
 8002b04:	4629      	mov	r1, r5
 8002b06:	eb63 0301 	sbc.w	r3, r3, r1
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b18:	4659      	mov	r1, fp
 8002b1a:	018b      	lsls	r3, r1, #6
 8002b1c:	4651      	mov	r1, sl
 8002b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b22:	4651      	mov	r1, sl
 8002b24:	018a      	lsls	r2, r1, #6
 8002b26:	4651      	mov	r1, sl
 8002b28:	ebb2 0801 	subs.w	r8, r2, r1
 8002b2c:	4659      	mov	r1, fp
 8002b2e:	eb63 0901 	sbc.w	r9, r3, r1
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b46:	4690      	mov	r8, r2
 8002b48:	4699      	mov	r9, r3
 8002b4a:	4623      	mov	r3, r4
 8002b4c:	eb18 0303 	adds.w	r3, r8, r3
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	462b      	mov	r3, r5
 8002b54:	eb49 0303 	adc.w	r3, r9, r3
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b66:	4629      	mov	r1, r5
 8002b68:	024b      	lsls	r3, r1, #9
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b70:	4621      	mov	r1, r4
 8002b72:	024a      	lsls	r2, r1, #9
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b84:	f7fd fb74 	bl	8000270 <__aeabi_uldivmod>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b90:	e058      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b92:	4b38      	ldr	r3, [pc, #224]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	099b      	lsrs	r3, r3, #6
 8002b98:	2200      	movs	r2, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ba2:	623b      	str	r3, [r7, #32]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bac:	4642      	mov	r2, r8
 8002bae:	464b      	mov	r3, r9
 8002bb0:	f04f 0000 	mov.w	r0, #0
 8002bb4:	f04f 0100 	mov.w	r1, #0
 8002bb8:	0159      	lsls	r1, r3, #5
 8002bba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bbe:	0150      	lsls	r0, r2, #5
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bca:	4649      	mov	r1, r9
 8002bcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002be0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002be4:	ebb2 040a 	subs.w	r4, r2, sl
 8002be8:	eb63 050b 	sbc.w	r5, r3, fp
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	00eb      	lsls	r3, r5, #3
 8002bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bfa:	00e2      	lsls	r2, r4, #3
 8002bfc:	4614      	mov	r4, r2
 8002bfe:	461d      	mov	r5, r3
 8002c00:	4643      	mov	r3, r8
 8002c02:	18e3      	adds	r3, r4, r3
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	464b      	mov	r3, r9
 8002c08:	eb45 0303 	adc.w	r3, r5, r3
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	028b      	lsls	r3, r1, #10
 8002c1e:	4621      	mov	r1, r4
 8002c20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c24:	4621      	mov	r1, r4
 8002c26:	028a      	lsls	r2, r1, #10
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	61fa      	str	r2, [r7, #28]
 8002c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c38:	f7fd fb1a 	bl	8000270 <__aeabi_uldivmod>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4613      	mov	r3, r2
 8002c42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c44:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	0c1b      	lsrs	r3, r3, #16
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c5e:	e002      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3750      	adds	r7, #80	; 0x50
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	00f42400 	.word	0x00f42400
 8002c7c:	007a1200 	.word	0x007a1200

08002c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000000 	.word	0x20000000

08002c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c9c:	f7ff fff0 	bl	8002c80 <HAL_RCC_GetHCLKFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	0a9b      	lsrs	r3, r3, #10
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4903      	ldr	r1, [pc, #12]	; (8002cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	08006c08 	.word	0x08006c08

08002cc0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	220f      	movs	r2, #15
 8002cce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002cd0:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_RCC_GetClockConfig+0x5c>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0203 	and.w	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <HAL_RCC_GetClockConfig+0x5c>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <HAL_RCC_GetClockConfig+0x5c>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cf4:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <HAL_RCC_GetClockConfig+0x5c>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	08db      	lsrs	r3, r3, #3
 8002cfa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d02:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <HAL_RCC_GetClockConfig+0x60>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0207 	and.w	r2, r3, #7
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	601a      	str	r2, [r3, #0]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40023c00 	.word	0x40023c00

08002d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e041      	b.n	8002dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f839 	bl	8002dc2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4619      	mov	r1, r3
 8002d62:	4610      	mov	r0, r2
 8002d64:	f000 fbb2 	bl	80034cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d001      	beq.n	8002df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e04e      	b.n	8002e8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a23      	ldr	r2, [pc, #140]	; (8002e9c <HAL_TIM_Base_Start_IT+0xc4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d022      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1a:	d01d      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1f      	ldr	r2, [pc, #124]	; (8002ea0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d018      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ea4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d013      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1c      	ldr	r2, [pc, #112]	; (8002ea8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00e      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <HAL_TIM_Base_Start_IT+0xd4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d009      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a19      	ldr	r2, [pc, #100]	; (8002eb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d004      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x80>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a18      	ldr	r2, [pc, #96]	; (8002eb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d111      	bne.n	8002e7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d010      	beq.n	8002e8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0201 	orr.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7a:	e007      	b.n	8002e8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40010000 	.word	0x40010000
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40000800 	.word	0x40000800
 8002ea8:	40000c00 	.word	0x40000c00
 8002eac:	40010400 	.word	0x40010400
 8002eb0:	40014000 	.word	0x40014000
 8002eb4:	40001800 	.word	0x40001800

08002eb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e041      	b.n	8002f4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fe f968 	bl	80011b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	f000 fae8 	bl	80034cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <HAL_TIM_PWM_Start+0x24>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	bf14      	ite	ne
 8002f74:	2301      	movne	r3, #1
 8002f76:	2300      	moveq	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e022      	b.n	8002fc2 <HAL_TIM_PWM_Start+0x6a>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d109      	bne.n	8002f96 <HAL_TIM_PWM_Start+0x3e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	bf14      	ite	ne
 8002f8e:	2301      	movne	r3, #1
 8002f90:	2300      	moveq	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	e015      	b.n	8002fc2 <HAL_TIM_PWM_Start+0x6a>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d109      	bne.n	8002fb0 <HAL_TIM_PWM_Start+0x58>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	bf14      	ite	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	2300      	moveq	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	e008      	b.n	8002fc2 <HAL_TIM_PWM_Start+0x6a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	bf14      	ite	ne
 8002fbc:	2301      	movne	r3, #1
 8002fbe:	2300      	moveq	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07c      	b.n	80030c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d104      	bne.n	8002fda <HAL_TIM_PWM_Start+0x82>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd8:	e013      	b.n	8003002 <HAL_TIM_PWM_Start+0xaa>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d104      	bne.n	8002fea <HAL_TIM_PWM_Start+0x92>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fe8:	e00b      	b.n	8003002 <HAL_TIM_PWM_Start+0xaa>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d104      	bne.n	8002ffa <HAL_TIM_PWM_Start+0xa2>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff8:	e003      	b.n	8003002 <HAL_TIM_PWM_Start+0xaa>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2201      	movs	r2, #1
 8003008:	6839      	ldr	r1, [r7, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fcae 	bl	800396c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a2d      	ldr	r2, [pc, #180]	; (80030cc <HAL_TIM_PWM_Start+0x174>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <HAL_TIM_PWM_Start+0xcc>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a2c      	ldr	r2, [pc, #176]	; (80030d0 <HAL_TIM_PWM_Start+0x178>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d101      	bne.n	8003028 <HAL_TIM_PWM_Start+0xd0>
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <HAL_TIM_PWM_Start+0xd2>
 8003028:	2300      	movs	r3, #0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d007      	beq.n	800303e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a22      	ldr	r2, [pc, #136]	; (80030cc <HAL_TIM_PWM_Start+0x174>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d022      	beq.n	800308e <HAL_TIM_PWM_Start+0x136>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003050:	d01d      	beq.n	800308e <HAL_TIM_PWM_Start+0x136>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1f      	ldr	r2, [pc, #124]	; (80030d4 <HAL_TIM_PWM_Start+0x17c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d018      	beq.n	800308e <HAL_TIM_PWM_Start+0x136>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <HAL_TIM_PWM_Start+0x180>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d013      	beq.n	800308e <HAL_TIM_PWM_Start+0x136>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1c      	ldr	r2, [pc, #112]	; (80030dc <HAL_TIM_PWM_Start+0x184>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00e      	beq.n	800308e <HAL_TIM_PWM_Start+0x136>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a16      	ldr	r2, [pc, #88]	; (80030d0 <HAL_TIM_PWM_Start+0x178>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d009      	beq.n	800308e <HAL_TIM_PWM_Start+0x136>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <HAL_TIM_PWM_Start+0x188>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_TIM_PWM_Start+0x136>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a16      	ldr	r2, [pc, #88]	; (80030e4 <HAL_TIM_PWM_Start+0x18c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d111      	bne.n	80030b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b06      	cmp	r3, #6
 800309e:	d010      	beq.n	80030c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b0:	e007      	b.n	80030c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f042 0201 	orr.w	r2, r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40010400 	.word	0x40010400
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40000800 	.word	0x40000800
 80030dc:	40000c00 	.word	0x40000c00
 80030e0:	40014000 	.word	0x40014000
 80030e4:	40001800 	.word	0x40001800

080030e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d122      	bne.n	8003144 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b02      	cmp	r3, #2
 800310a:	d11b      	bne.n	8003144 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0202 	mvn.w	r2, #2
 8003114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f9b0 	bl	8003490 <HAL_TIM_IC_CaptureCallback>
 8003130:	e005      	b.n	800313e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f9a2 	bl	800347c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f9b3 	bl	80034a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b04      	cmp	r3, #4
 8003150:	d122      	bne.n	8003198 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b04      	cmp	r3, #4
 800315e:	d11b      	bne.n	8003198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0204 	mvn.w	r2, #4
 8003168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f986 	bl	8003490 <HAL_TIM_IC_CaptureCallback>
 8003184:	e005      	b.n	8003192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f978 	bl	800347c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f989 	bl	80034a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d122      	bne.n	80031ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d11b      	bne.n	80031ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0208 	mvn.w	r2, #8
 80031bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2204      	movs	r2, #4
 80031c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f95c 	bl	8003490 <HAL_TIM_IC_CaptureCallback>
 80031d8:	e005      	b.n	80031e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f94e 	bl	800347c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f95f 	bl	80034a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d122      	bne.n	8003240 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2b10      	cmp	r3, #16
 8003206:	d11b      	bne.n	8003240 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0210 	mvn.w	r2, #16
 8003210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2208      	movs	r2, #8
 8003216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f932 	bl	8003490 <HAL_TIM_IC_CaptureCallback>
 800322c:	e005      	b.n	800323a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f924 	bl	800347c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f935 	bl	80034a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b01      	cmp	r3, #1
 800324c:	d10e      	bne.n	800326c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d107      	bne.n	800326c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0201 	mvn.w	r2, #1
 8003264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd ff0c 	bl	8001084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003276:	2b80      	cmp	r3, #128	; 0x80
 8003278:	d10e      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003284:	2b80      	cmp	r3, #128	; 0x80
 8003286:	d107      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fc16 	bl	8003ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a2:	2b40      	cmp	r3, #64	; 0x40
 80032a4:	d10e      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b0:	2b40      	cmp	r3, #64	; 0x40
 80032b2:	d107      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8fa 	bl	80034b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d10e      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d107      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0220 	mvn.w	r2, #32
 80032e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fbe0 	bl	8003ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003312:	2302      	movs	r3, #2
 8003314:	e0ae      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b0c      	cmp	r3, #12
 8003322:	f200 809f 	bhi.w	8003464 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003326:	a201      	add	r2, pc, #4	; (adr r2, 800332c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	08003361 	.word	0x08003361
 8003330:	08003465 	.word	0x08003465
 8003334:	08003465 	.word	0x08003465
 8003338:	08003465 	.word	0x08003465
 800333c:	080033a1 	.word	0x080033a1
 8003340:	08003465 	.word	0x08003465
 8003344:	08003465 	.word	0x08003465
 8003348:	08003465 	.word	0x08003465
 800334c:	080033e3 	.word	0x080033e3
 8003350:	08003465 	.word	0x08003465
 8003354:	08003465 	.word	0x08003465
 8003358:	08003465 	.word	0x08003465
 800335c:	08003423 	.word	0x08003423
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 f950 	bl	800360c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0208 	orr.w	r2, r2, #8
 800337a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0204 	bic.w	r2, r2, #4
 800338a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6999      	ldr	r1, [r3, #24]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	619a      	str	r2, [r3, #24]
      break;
 800339e:	e064      	b.n	800346a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f9a0 	bl	80036ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6999      	ldr	r1, [r3, #24]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	021a      	lsls	r2, r3, #8
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	619a      	str	r2, [r3, #24]
      break;
 80033e0:	e043      	b.n	800346a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68b9      	ldr	r1, [r7, #8]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 f9f5 	bl	80037d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69da      	ldr	r2, [r3, #28]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0208 	orr.w	r2, r2, #8
 80033fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69da      	ldr	r2, [r3, #28]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0204 	bic.w	r2, r2, #4
 800340c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69d9      	ldr	r1, [r3, #28]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	61da      	str	r2, [r3, #28]
      break;
 8003420:	e023      	b.n	800346a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fa49 	bl	80038c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800343c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69d9      	ldr	r1, [r3, #28]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	021a      	lsls	r2, r3, #8
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	61da      	str	r2, [r3, #28]
      break;
 8003462:	e002      	b.n	800346a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	75fb      	strb	r3, [r7, #23]
      break;
 8003468:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003472:	7dfb      	ldrb	r3, [r7, #23]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a40      	ldr	r2, [pc, #256]	; (80035e0 <TIM_Base_SetConfig+0x114>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d013      	beq.n	800350c <TIM_Base_SetConfig+0x40>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d00f      	beq.n	800350c <TIM_Base_SetConfig+0x40>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a3d      	ldr	r2, [pc, #244]	; (80035e4 <TIM_Base_SetConfig+0x118>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00b      	beq.n	800350c <TIM_Base_SetConfig+0x40>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a3c      	ldr	r2, [pc, #240]	; (80035e8 <TIM_Base_SetConfig+0x11c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d007      	beq.n	800350c <TIM_Base_SetConfig+0x40>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a3b      	ldr	r2, [pc, #236]	; (80035ec <TIM_Base_SetConfig+0x120>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <TIM_Base_SetConfig+0x40>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a3a      	ldr	r2, [pc, #232]	; (80035f0 <TIM_Base_SetConfig+0x124>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d108      	bne.n	800351e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2f      	ldr	r2, [pc, #188]	; (80035e0 <TIM_Base_SetConfig+0x114>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d02b      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352c:	d027      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2c      	ldr	r2, [pc, #176]	; (80035e4 <TIM_Base_SetConfig+0x118>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d023      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2b      	ldr	r2, [pc, #172]	; (80035e8 <TIM_Base_SetConfig+0x11c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d01f      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a2a      	ldr	r2, [pc, #168]	; (80035ec <TIM_Base_SetConfig+0x120>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01b      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a29      	ldr	r2, [pc, #164]	; (80035f0 <TIM_Base_SetConfig+0x124>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d017      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a28      	ldr	r2, [pc, #160]	; (80035f4 <TIM_Base_SetConfig+0x128>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a27      	ldr	r2, [pc, #156]	; (80035f8 <TIM_Base_SetConfig+0x12c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00f      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a26      	ldr	r2, [pc, #152]	; (80035fc <TIM_Base_SetConfig+0x130>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00b      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a25      	ldr	r2, [pc, #148]	; (8003600 <TIM_Base_SetConfig+0x134>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d007      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a24      	ldr	r2, [pc, #144]	; (8003604 <TIM_Base_SetConfig+0x138>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d003      	beq.n	800357e <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a23      	ldr	r2, [pc, #140]	; (8003608 <TIM_Base_SetConfig+0x13c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d108      	bne.n	8003590 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <TIM_Base_SetConfig+0x114>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <TIM_Base_SetConfig+0xf8>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a0c      	ldr	r2, [pc, #48]	; (80035f0 <TIM_Base_SetConfig+0x124>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d103      	bne.n	80035cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	615a      	str	r2, [r3, #20]
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40010000 	.word	0x40010000
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40000800 	.word	0x40000800
 80035ec:	40000c00 	.word	0x40000c00
 80035f0:	40010400 	.word	0x40010400
 80035f4:	40014000 	.word	0x40014000
 80035f8:	40014400 	.word	0x40014400
 80035fc:	40014800 	.word	0x40014800
 8003600:	40001800 	.word	0x40001800
 8003604:	40001c00 	.word	0x40001c00
 8003608:	40002000 	.word	0x40002000

0800360c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f023 0201 	bic.w	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0303 	bic.w	r3, r3, #3
 8003642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 0302 	bic.w	r3, r3, #2
 8003654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a20      	ldr	r2, [pc, #128]	; (80036e4 <TIM_OC1_SetConfig+0xd8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d003      	beq.n	8003670 <TIM_OC1_SetConfig+0x64>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a1f      	ldr	r2, [pc, #124]	; (80036e8 <TIM_OC1_SetConfig+0xdc>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d10c      	bne.n	800368a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f023 0308 	bic.w	r3, r3, #8
 8003676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <TIM_OC1_SetConfig+0xd8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d003      	beq.n	800369a <TIM_OC1_SetConfig+0x8e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <TIM_OC1_SetConfig+0xdc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d111      	bne.n	80036be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	621a      	str	r2, [r3, #32]
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40010400 	.word	0x40010400

080036ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	f023 0210 	bic.w	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800371a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f023 0320 	bic.w	r3, r3, #32
 8003736:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <TIM_OC2_SetConfig+0xe4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_OC2_SetConfig+0x68>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a21      	ldr	r2, [pc, #132]	; (80037d4 <TIM_OC2_SetConfig+0xe8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d10d      	bne.n	8003770 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800375a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800376e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <TIM_OC2_SetConfig+0xe4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d003      	beq.n	8003780 <TIM_OC2_SetConfig+0x94>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <TIM_OC2_SetConfig+0xe8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d113      	bne.n	80037a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800378e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	621a      	str	r2, [r3, #32]
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40010000 	.word	0x40010000
 80037d4:	40010400 	.word	0x40010400

080037d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0303 	bic.w	r3, r3, #3
 800380e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a21      	ldr	r2, [pc, #132]	; (80038b8 <TIM_OC3_SetConfig+0xe0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d003      	beq.n	800383e <TIM_OC3_SetConfig+0x66>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a20      	ldr	r2, [pc, #128]	; (80038bc <TIM_OC3_SetConfig+0xe4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d10d      	bne.n	800385a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a16      	ldr	r2, [pc, #88]	; (80038b8 <TIM_OC3_SetConfig+0xe0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d003      	beq.n	800386a <TIM_OC3_SetConfig+0x92>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a15      	ldr	r2, [pc, #84]	; (80038bc <TIM_OC3_SetConfig+0xe4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d113      	bne.n	8003892 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	621a      	str	r2, [r3, #32]
}
 80038ac:	bf00      	nop
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40010000 	.word	0x40010000
 80038bc:	40010400 	.word	0x40010400

080038c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800390a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	031b      	lsls	r3, r3, #12
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a12      	ldr	r2, [pc, #72]	; (8003964 <TIM_OC4_SetConfig+0xa4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_OC4_SetConfig+0x68>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a11      	ldr	r2, [pc, #68]	; (8003968 <TIM_OC4_SetConfig+0xa8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d109      	bne.n	800393c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800392e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	019b      	lsls	r3, r3, #6
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	bf00      	nop
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40010000 	.word	0x40010000
 8003968:	40010400 	.word	0x40010400

0800396c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	2201      	movs	r2, #1
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a1a      	ldr	r2, [r3, #32]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	43db      	mvns	r3, r3
 800398e:	401a      	ands	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a1a      	ldr	r2, [r3, #32]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	fa01 f303 	lsl.w	r3, r1, r3
 80039a4:	431a      	orrs	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	621a      	str	r2, [r3, #32]
}
 80039aa:	bf00      	nop
 80039ac:	371c      	adds	r7, #28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e05a      	b.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a21      	ldr	r2, [pc, #132]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d022      	beq.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1c:	d01d      	beq.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a1d      	ldr	r2, [pc, #116]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d018      	beq.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1a      	ldr	r2, [pc, #104]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00e      	beq.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d009      	beq.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a17      	ldr	r2, [pc, #92]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d004      	beq.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a15      	ldr	r2, [pc, #84]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d10c      	bne.n	8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40000c00 	.word	0x40000c00
 8003aa4:	40010400 	.word	0x40010400
 8003aa8:	40014000 	.word	0x40014000
 8003aac:	40001800 	.word	0x40001800

08003ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f103 0208 	add.w	r2, r3, #8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003af0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f103 0208 	add.w	r2, r3, #8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f103 0208 	add.w	r2, r3, #8
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	601a      	str	r2, [r3, #0]
}
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b085      	sub	sp, #20
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b90:	d103      	bne.n	8003b9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e00c      	b.n	8003bb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	e002      	b.n	8003ba8 <vListInsert+0x2e>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d2f6      	bcs.n	8003ba2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	601a      	str	r2, [r3, #0]
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6892      	ldr	r2, [r2, #8]
 8003c02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6852      	ldr	r2, [r2, #4]
 8003c0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d103      	bne.n	8003c20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	1e5a      	subs	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c66:	bf00      	nop
 8003c68:	e7fe      	b.n	8003c68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c6a:	f001 ffd3 	bl	8005c14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	68f9      	ldr	r1, [r7, #12]
 8003c78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	441a      	add	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	68f9      	ldr	r1, [r7, #12]
 8003c9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	441a      	add	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	22ff      	movs	r2, #255	; 0xff
 8003cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	22ff      	movs	r2, #255	; 0xff
 8003cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d114      	bne.n	8003cea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01a      	beq.n	8003cfe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3310      	adds	r3, #16
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 f8bf 	bl	8004e50 <xTaskRemoveFromEventList>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d012      	beq.n	8003cfe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <xQueueGenericReset+0xcc>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	e009      	b.n	8003cfe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3310      	adds	r3, #16
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff fef2 	bl	8003ad8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	3324      	adds	r3, #36	; 0x24
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff feed 	bl	8003ad8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cfe:	f001 ffb9 	bl	8005c74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d02:	2301      	movs	r3, #1
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	e000ed04 	.word	0xe000ed04

08003d10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	; 0x28
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	613b      	str	r3, [r7, #16]
}
 8003d36:	bf00      	nop
 8003d38:	e7fe      	b.n	8003d38 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d102      	bne.n	8003d46 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	e004      	b.n	8003d50 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	fb02 f303 	mul.w	r3, r2, r3
 8003d4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	3350      	adds	r3, #80	; 0x50
 8003d54:	4618      	mov	r0, r3
 8003d56:	f002 f87f 	bl	8005e58 <pvPortMalloc>
 8003d5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00d      	beq.n	8003d7e <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	3350      	adds	r3, #80	; 0x50
 8003d6a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d6c:	79fa      	ldrb	r2, [r7, #7]
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	4613      	mov	r3, r2
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f805 	bl	8003d88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d7e:	69bb      	ldr	r3, [r7, #24]
	}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3720      	adds	r7, #32
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d103      	bne.n	8003da4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	e002      	b.n	8003daa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003db6:	2101      	movs	r1, #1
 8003db8:	69b8      	ldr	r0, [r7, #24]
 8003dba:	f7ff ff41 	bl	8003c40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08e      	sub	sp, #56	; 0x38
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003dde:	2300      	movs	r3, #0
 8003de0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <xQueueGenericSend+0x32>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003dfe:	bf00      	nop
 8003e00:	e7fe      	b.n	8003e00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d103      	bne.n	8003e10 <xQueueGenericSend+0x40>
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <xQueueGenericSend+0x44>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <xQueueGenericSend+0x46>
 8003e14:	2300      	movs	r3, #0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <xQueueGenericSend+0x60>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d103      	bne.n	8003e3e <xQueueGenericSend+0x6e>
 8003e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <xQueueGenericSend+0x72>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <xQueueGenericSend+0x74>
 8003e42:	2300      	movs	r3, #0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <xQueueGenericSend+0x8e>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	623b      	str	r3, [r7, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e5e:	f001 f993 	bl	8005188 <xTaskGetSchedulerState>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <xQueueGenericSend+0x9e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <xQueueGenericSend+0xa2>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <xQueueGenericSend+0xa4>
 8003e72:	2300      	movs	r3, #0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <xQueueGenericSend+0xbe>
	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	61fb      	str	r3, [r7, #28]
}
 8003e8a:	bf00      	nop
 8003e8c:	e7fe      	b.n	8003e8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e8e:	f001 fec1 	bl	8005c14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <xQueueGenericSend+0xd4>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d129      	bne.n	8003ef8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	68b9      	ldr	r1, [r7, #8]
 8003ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eaa:	f000 fa07 	bl	80042bc <prvCopyDataToQueue>
 8003eae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d010      	beq.n	8003eda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eba:	3324      	adds	r3, #36	; 0x24
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 ffc7 	bl	8004e50 <xTaskRemoveFromEventList>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d013      	beq.n	8003ef0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ec8:	4b3f      	ldr	r3, [pc, #252]	; (8003fc8 <xQueueGenericSend+0x1f8>)
 8003eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	e00a      	b.n	8003ef0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ee0:	4b39      	ldr	r3, [pc, #228]	; (8003fc8 <xQueueGenericSend+0x1f8>)
 8003ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ef0:	f001 fec0 	bl	8005c74 <vPortExitCritical>
				return pdPASS;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e063      	b.n	8003fc0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003efe:	f001 feb9 	bl	8005c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e05c      	b.n	8003fc0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d106      	bne.n	8003f1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f0c:	f107 0314 	add.w	r3, r7, #20
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 ffff 	bl	8004f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f16:	2301      	movs	r3, #1
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f1a:	f001 feab 	bl	8005c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f1e:	f000 fd79 	bl	8004a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f22:	f001 fe77 	bl	8005c14 <vPortEnterCritical>
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f2c:	b25b      	sxtb	r3, r3
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f32:	d103      	bne.n	8003f3c <xQueueGenericSend+0x16c>
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f42:	b25b      	sxtb	r3, r3
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f48:	d103      	bne.n	8003f52 <xQueueGenericSend+0x182>
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f52:	f001 fe8f 	bl	8005c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f56:	1d3a      	adds	r2, r7, #4
 8003f58:	f107 0314 	add.w	r3, r7, #20
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 ffee 	bl	8004f40 <xTaskCheckForTimeOut>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d124      	bne.n	8003fb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f6c:	f000 fa9e 	bl	80044ac <prvIsQueueFull>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d018      	beq.n	8003fa8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f78:	3310      	adds	r3, #16
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 ff16 	bl	8004db0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f86:	f000 fa29 	bl	80043dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f8a:	f000 fd51 	bl	8004a30 <xTaskResumeAll>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f47f af7c 	bne.w	8003e8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <xQueueGenericSend+0x1f8>)
 8003f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	e772      	b.n	8003e8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003faa:	f000 fa17 	bl	80043dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fae:	f000 fd3f 	bl	8004a30 <xTaskResumeAll>
 8003fb2:	e76c      	b.n	8003e8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fb6:	f000 fa11 	bl	80043dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fba:	f000 fd39 	bl	8004a30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003fbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3738      	adds	r7, #56	; 0x38
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	e000ed04 	.word	0xe000ed04

08003fcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08e      	sub	sp, #56	; 0x38
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d103      	bne.n	8004008 <xQueueGenericSendFromISR+0x3c>
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <xQueueGenericSendFromISR+0x40>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <xQueueGenericSendFromISR+0x42>
 800400c:	2300      	movs	r3, #0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	623b      	str	r3, [r7, #32]
}
 8004024:	bf00      	nop
 8004026:	e7fe      	b.n	8004026 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d103      	bne.n	8004036 <xQueueGenericSendFromISR+0x6a>
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <xQueueGenericSendFromISR+0x6e>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <xQueueGenericSendFromISR+0x70>
 800403a:	2300      	movs	r3, #0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	61fb      	str	r3, [r7, #28]
}
 8004052:	bf00      	nop
 8004054:	e7fe      	b.n	8004054 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004056:	f001 febf 	bl	8005dd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800405a:	f3ef 8211 	mrs	r2, BASEPRI
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	61ba      	str	r2, [r7, #24]
 8004070:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004072:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407e:	429a      	cmp	r2, r3
 8004080:	d302      	bcc.n	8004088 <xQueueGenericSendFromISR+0xbc>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d12c      	bne.n	80040e2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800408e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004098:	f000 f910 	bl	80042bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800409c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a4:	d112      	bne.n	80040cc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d016      	beq.n	80040dc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	3324      	adds	r3, #36	; 0x24
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fecc 	bl	8004e50 <xTaskRemoveFromEventList>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00e      	beq.n	80040dc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00b      	beq.n	80040dc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e007      	b.n	80040dc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80040cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040d0:	3301      	adds	r3, #1
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	b25a      	sxtb	r2, r3
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80040dc:	2301      	movs	r3, #1
 80040de:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80040e0:	e001      	b.n	80040e6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	637b      	str	r3, [r7, #52]	; 0x34
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3738      	adds	r7, #56	; 0x38
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08c      	sub	sp, #48	; 0x30
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004108:	2300      	movs	r3, #0
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <xQueueReceive+0x30>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	623b      	str	r3, [r7, #32]
}
 8004128:	bf00      	nop
 800412a:	e7fe      	b.n	800412a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <xQueueReceive+0x3e>
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <xQueueReceive+0x42>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <xQueueReceive+0x44>
 800413e:	2300      	movs	r3, #0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <xQueueReceive+0x5e>
	__asm volatile
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	61fb      	str	r3, [r7, #28]
}
 8004156:	bf00      	nop
 8004158:	e7fe      	b.n	8004158 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800415a:	f001 f815 	bl	8005188 <xTaskGetSchedulerState>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <xQueueReceive+0x6e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <xQueueReceive+0x72>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <xQueueReceive+0x74>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <xQueueReceive+0x8e>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	61bb      	str	r3, [r7, #24]
}
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800418a:	f001 fd43 	bl	8005c14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004192:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	2b00      	cmp	r3, #0
 8004198:	d01f      	beq.n	80041da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800419e:	f000 f8f7 	bl	8004390 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	1e5a      	subs	r2, r3, #1
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00f      	beq.n	80041d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	3310      	adds	r3, #16
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fe4a 	bl	8004e50 <xTaskRemoveFromEventList>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d007      	beq.n	80041d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80041c2:	4b3d      	ldr	r3, [pc, #244]	; (80042b8 <xQueueReceive+0x1bc>)
 80041c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041d2:	f001 fd4f 	bl	8005c74 <vPortExitCritical>
				return pdPASS;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e069      	b.n	80042ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d103      	bne.n	80041e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041e0:	f001 fd48 	bl	8005c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041e4:	2300      	movs	r3, #0
 80041e6:	e062      	b.n	80042ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041ee:	f107 0310 	add.w	r3, r7, #16
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fe8e 	bl	8004f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041f8:	2301      	movs	r3, #1
 80041fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041fc:	f001 fd3a 	bl	8005c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004200:	f000 fc08 	bl	8004a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004204:	f001 fd06 	bl	8005c14 <vPortEnterCritical>
 8004208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800420e:	b25b      	sxtb	r3, r3
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004214:	d103      	bne.n	800421e <xQueueReceive+0x122>
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004224:	b25b      	sxtb	r3, r3
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800422a:	d103      	bne.n	8004234 <xQueueReceive+0x138>
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004234:	f001 fd1e 	bl	8005c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004238:	1d3a      	adds	r2, r7, #4
 800423a:	f107 0310 	add.w	r3, r7, #16
 800423e:	4611      	mov	r1, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fe7d 	bl	8004f40 <xTaskCheckForTimeOut>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d123      	bne.n	8004294 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800424c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800424e:	f000 f917 	bl	8004480 <prvIsQueueEmpty>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d017      	beq.n	8004288 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	3324      	adds	r3, #36	; 0x24
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fda5 	bl	8004db0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004268:	f000 f8b8 	bl	80043dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800426c:	f000 fbe0 	bl	8004a30 <xTaskResumeAll>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d189      	bne.n	800418a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004276:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <xQueueReceive+0x1bc>)
 8004278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	e780      	b.n	800418a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800428a:	f000 f8a7 	bl	80043dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800428e:	f000 fbcf 	bl	8004a30 <xTaskResumeAll>
 8004292:	e77a      	b.n	800418a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004296:	f000 f8a1 	bl	80043dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800429a:	f000 fbc9 	bl	8004a30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800429e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042a0:	f000 f8ee 	bl	8004480 <prvIsQueueEmpty>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f43f af6f 	beq.w	800418a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3730      	adds	r7, #48	; 0x30
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10d      	bne.n	80042f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d14d      	bne.n	800437e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 ff6c 	bl	80051c4 <xTaskPriorityDisinherit>
 80042ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	e043      	b.n	800437e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d119      	bne.n	8004330 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6858      	ldr	r0, [r3, #4]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	461a      	mov	r2, r3
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	f001 ffaa 	bl	8006260 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	441a      	add	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	429a      	cmp	r2, r3
 8004324:	d32b      	bcc.n	800437e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	e026      	b.n	800437e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	68d8      	ldr	r0, [r3, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	461a      	mov	r2, r3
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	f001 ff90 	bl	8006260 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	425b      	negs	r3, r3
 800434a:	441a      	add	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d207      	bcs.n	800436c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	425b      	negs	r3, r3
 8004366:	441a      	add	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d105      	bne.n	800437e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	3b01      	subs	r3, #1
 800437c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004386:	697b      	ldr	r3, [r7, #20]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d018      	beq.n	80043d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	441a      	add	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d303      	bcc.n	80043c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68d9      	ldr	r1, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	461a      	mov	r2, r3
 80043ce:	6838      	ldr	r0, [r7, #0]
 80043d0:	f001 ff46 	bl	8006260 <memcpy>
	}
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043e4:	f001 fc16 	bl	8005c14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043f0:	e011      	b.n	8004416 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d012      	beq.n	8004420 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3324      	adds	r3, #36	; 0x24
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fd26 	bl	8004e50 <xTaskRemoveFromEventList>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800440a:	f000 fdfb 	bl	8005004 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	3b01      	subs	r3, #1
 8004412:	b2db      	uxtb	r3, r3
 8004414:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800441a:	2b00      	cmp	r3, #0
 800441c:	dce9      	bgt.n	80043f2 <prvUnlockQueue+0x16>
 800441e:	e000      	b.n	8004422 <prvUnlockQueue+0x46>
					break;
 8004420:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	22ff      	movs	r2, #255	; 0xff
 8004426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800442a:	f001 fc23 	bl	8005c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800442e:	f001 fbf1 	bl	8005c14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004438:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800443a:	e011      	b.n	8004460 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d012      	beq.n	800446a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3310      	adds	r3, #16
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fd01 	bl	8004e50 <xTaskRemoveFromEventList>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004454:	f000 fdd6 	bl	8005004 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004458:	7bbb      	ldrb	r3, [r7, #14]
 800445a:	3b01      	subs	r3, #1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004464:	2b00      	cmp	r3, #0
 8004466:	dce9      	bgt.n	800443c <prvUnlockQueue+0x60>
 8004468:	e000      	b.n	800446c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800446a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	22ff      	movs	r2, #255	; 0xff
 8004470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004474:	f001 fbfe 	bl	8005c74 <vPortExitCritical>
}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004488:	f001 fbc4 	bl	8005c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	2b00      	cmp	r3, #0
 8004492:	d102      	bne.n	800449a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004494:	2301      	movs	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e001      	b.n	800449e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800449e:	f001 fbe9 	bl	8005c74 <vPortExitCritical>

	return xReturn;
 80044a2:	68fb      	ldr	r3, [r7, #12]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044b4:	f001 fbae 	bl	8005c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d102      	bne.n	80044ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80044c4:	2301      	movs	r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	e001      	b.n	80044ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044ce:	f001 fbd1 	bl	8005c74 <vPortExitCritical>

	return xReturn;
 80044d2:	68fb      	ldr	r3, [r7, #12]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e014      	b.n	8004516 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80044ec:	4a0f      	ldr	r2, [pc, #60]	; (800452c <vQueueAddToRegistry+0x50>)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10b      	bne.n	8004510 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80044f8:	490c      	ldr	r1, [pc, #48]	; (800452c <vQueueAddToRegistry+0x50>)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004502:	4a0a      	ldr	r2, [pc, #40]	; (800452c <vQueueAddToRegistry+0x50>)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800450e:	e006      	b.n	800451e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b07      	cmp	r3, #7
 800451a:	d9e7      	bls.n	80044ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000194 	.word	0x20000194

08004530 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004540:	f001 fb68 	bl	8005c14 <vPortEnterCritical>
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800454a:	b25b      	sxtb	r3, r3
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004550:	d103      	bne.n	800455a <vQueueWaitForMessageRestricted+0x2a>
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004560:	b25b      	sxtb	r3, r3
 8004562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004566:	d103      	bne.n	8004570 <vQueueWaitForMessageRestricted+0x40>
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004570:	f001 fb80 	bl	8005c74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	2b00      	cmp	r3, #0
 800457a:	d106      	bne.n	800458a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	3324      	adds	r3, #36	; 0x24
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fc37 	bl	8004df8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800458a:	6978      	ldr	r0, [r7, #20]
 800458c:	f7ff ff26 	bl	80043dc <prvUnlockQueue>
	}
 8004590:	bf00      	nop
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08c      	sub	sp, #48	; 0x30
 800459c:	af04      	add	r7, sp, #16
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	4613      	mov	r3, r2
 80045a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f001 fc53 	bl	8005e58 <pvPortMalloc>
 80045b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00e      	beq.n	80045d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80045ba:	2058      	movs	r0, #88	; 0x58
 80045bc:	f001 fc4c 	bl	8005e58 <pvPortMalloc>
 80045c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30
 80045ce:	e005      	b.n	80045dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045d0:	6978      	ldr	r0, [r7, #20]
 80045d2:	f001 fd05 	bl	8005fe0 <vPortFree>
 80045d6:	e001      	b.n	80045dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d013      	beq.n	800460a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045e2:	88fa      	ldrh	r2, [r7, #6]
 80045e4:	2300      	movs	r3, #0
 80045e6:	9303      	str	r3, [sp, #12]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	9302      	str	r3, [sp, #8]
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	9301      	str	r3, [sp, #4]
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	68b9      	ldr	r1, [r7, #8]
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f80e 	bl	800461a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045fe:	69f8      	ldr	r0, [r7, #28]
 8004600:	f000 f89a 	bl	8004738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004604:	2301      	movs	r3, #1
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	e002      	b.n	8004610 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800460a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800460e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004610:	69bb      	ldr	r3, [r7, #24]
	}
 8004612:	4618      	mov	r0, r3
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b088      	sub	sp, #32
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
 8004626:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	461a      	mov	r2, r3
 8004632:	21a5      	movs	r1, #165	; 0xa5
 8004634:	f001 fe22 	bl	800627c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004642:	3b01      	subs	r3, #1
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	f023 0307 	bic.w	r3, r3, #7
 8004650:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <prvInitialiseNewTask+0x58>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	617b      	str	r3, [r7, #20]
}
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01f      	beq.n	80046b8 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	e012      	b.n	80046a4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	4413      	add	r3, r2
 8004684:	7819      	ldrb	r1, [r3, #0]
 8004686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	4413      	add	r3, r2
 800468c:	3334      	adds	r3, #52	; 0x34
 800468e:	460a      	mov	r2, r1
 8004690:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4413      	add	r3, r2
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d006      	beq.n	80046ac <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	3301      	adds	r3, #1
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b09      	cmp	r3, #9
 80046a8:	d9e9      	bls.n	800467e <prvInitialiseNewTask+0x64>
 80046aa:	e000      	b.n	80046ae <prvInitialiseNewTask+0x94>
			{
				break;
 80046ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046b6:	e003      	b.n	80046c0 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d901      	bls.n	80046ca <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046c6:	2304      	movs	r3, #4
 80046c8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046d4:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	2200      	movs	r2, #0
 80046da:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	3304      	adds	r3, #4
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fa19 	bl	8003b18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	3318      	adds	r3, #24
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff fa14 	bl	8003b18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	f1c3 0205 	rsb	r2, r3, #5
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004704:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	2200      	movs	r2, #0
 800470a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	68f9      	ldr	r1, [r7, #12]
 8004718:	69b8      	ldr	r0, [r7, #24]
 800471a:	f001 f951 	bl	80059c0 <pxPortInitialiseStack>
 800471e:	4602      	mov	r2, r0
 8004720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004722:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800472e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004730:	bf00      	nop
 8004732:	3720      	adds	r7, #32
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004740:	f001 fa68 	bl	8005c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004744:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <prvAddNewTaskToReadyList+0xc0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3301      	adds	r3, #1
 800474a:	4a2b      	ldr	r2, [pc, #172]	; (80047f8 <prvAddNewTaskToReadyList+0xc0>)
 800474c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800474e:	4b2b      	ldr	r3, [pc, #172]	; (80047fc <prvAddNewTaskToReadyList+0xc4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004756:	4a29      	ldr	r2, [pc, #164]	; (80047fc <prvAddNewTaskToReadyList+0xc4>)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800475c:	4b26      	ldr	r3, [pc, #152]	; (80047f8 <prvAddNewTaskToReadyList+0xc0>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d110      	bne.n	8004786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004764:	f000 fc72 	bl	800504c <prvInitialiseTaskLists>
 8004768:	e00d      	b.n	8004786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800476a:	4b25      	ldr	r3, [pc, #148]	; (8004800 <prvAddNewTaskToReadyList+0xc8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d109      	bne.n	8004786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004772:	4b22      	ldr	r3, [pc, #136]	; (80047fc <prvAddNewTaskToReadyList+0xc4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	429a      	cmp	r2, r3
 800477e:	d802      	bhi.n	8004786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004780:	4a1e      	ldr	r2, [pc, #120]	; (80047fc <prvAddNewTaskToReadyList+0xc4>)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004786:	4b1f      	ldr	r3, [pc, #124]	; (8004804 <prvAddNewTaskToReadyList+0xcc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3301      	adds	r3, #1
 800478c:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <prvAddNewTaskToReadyList+0xcc>)
 800478e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004790:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <prvAddNewTaskToReadyList+0xcc>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	2201      	movs	r2, #1
 800479e:	409a      	lsls	r2, r3
 80047a0:	4b19      	ldr	r3, [pc, #100]	; (8004808 <prvAddNewTaskToReadyList+0xd0>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	4a18      	ldr	r2, [pc, #96]	; (8004808 <prvAddNewTaskToReadyList+0xd0>)
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4a15      	ldr	r2, [pc, #84]	; (800480c <prvAddNewTaskToReadyList+0xd4>)
 80047b8:	441a      	add	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3304      	adds	r3, #4
 80047be:	4619      	mov	r1, r3
 80047c0:	4610      	mov	r0, r2
 80047c2:	f7ff f9b6 	bl	8003b32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047c6:	f001 fa55 	bl	8005c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047ca:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <prvAddNewTaskToReadyList+0xc8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00e      	beq.n	80047f0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047d2:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <prvAddNewTaskToReadyList+0xc4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	429a      	cmp	r2, r3
 80047de:	d207      	bcs.n	80047f0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <prvAddNewTaskToReadyList+0xd8>)
 80047e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	200002ac 	.word	0x200002ac
 80047fc:	200001d4 	.word	0x200001d4
 8004800:	200002b8 	.word	0x200002b8
 8004804:	200002c8 	.word	0x200002c8
 8004808:	200002b4 	.word	0x200002b4
 800480c:	200001d8 	.word	0x200001d8
 8004810:	e000ed04 	.word	0xe000ed04

08004814 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08a      	sub	sp, #40	; 0x28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800481e:	2300      	movs	r3, #0
 8004820:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <vTaskDelayUntil+0x2a>
	__asm volatile
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	617b      	str	r3, [r7, #20]
}
 800483a:	bf00      	nop
 800483c:	e7fe      	b.n	800483c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10a      	bne.n	800485a <vTaskDelayUntil+0x46>
	__asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	613b      	str	r3, [r7, #16]
}
 8004856:	bf00      	nop
 8004858:	e7fe      	b.n	8004858 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800485a:	4b2a      	ldr	r3, [pc, #168]	; (8004904 <vTaskDelayUntil+0xf0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <vTaskDelayUntil+0x64>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	60fb      	str	r3, [r7, #12]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004878:	f000 f8cc 	bl	8004a14 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800487c:	4b22      	ldr	r3, [pc, #136]	; (8004908 <vTaskDelayUntil+0xf4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	4413      	add	r3, r2
 800488a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6a3a      	ldr	r2, [r7, #32]
 8004892:	429a      	cmp	r2, r3
 8004894:	d20b      	bcs.n	80048ae <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	429a      	cmp	r2, r3
 800489e:	d211      	bcs.n	80048c4 <vTaskDelayUntil+0xb0>
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d90d      	bls.n	80048c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80048a8:	2301      	movs	r3, #1
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
 80048ac:	e00a      	b.n	80048c4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d303      	bcc.n	80048c0 <vTaskDelayUntil+0xac>
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d901      	bls.n	80048c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80048c0:	2301      	movs	r3, #1
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d006      	beq.n	80048de <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2100      	movs	r1, #0
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fcf9 	bl	80052d0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80048de:	f000 f8a7 	bl	8004a30 <xTaskResumeAll>
 80048e2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d107      	bne.n	80048fa <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80048ea:	4b08      	ldr	r3, [pc, #32]	; (800490c <vTaskDelayUntil+0xf8>)
 80048ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048fa:	bf00      	nop
 80048fc:	3728      	adds	r7, #40	; 0x28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	200002d4 	.word	0x200002d4
 8004908:	200002b0 	.word	0x200002b0
 800490c:	e000ed04 	.word	0xe000ed04

08004910 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d017      	beq.n	8004952 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004922:	4b13      	ldr	r3, [pc, #76]	; (8004970 <vTaskDelay+0x60>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <vTaskDelay+0x30>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	60bb      	str	r3, [r7, #8]
}
 800493c:	bf00      	nop
 800493e:	e7fe      	b.n	800493e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004940:	f000 f868 	bl	8004a14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004944:	2100      	movs	r1, #0
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fcc2 	bl	80052d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800494c:	f000 f870 	bl	8004a30 <xTaskResumeAll>
 8004950:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <vTaskDelay+0x64>)
 800495a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	200002d4 	.word	0x200002d4
 8004974:	e000ed04 	.word	0xe000ed04

08004978 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800497e:	4b1f      	ldr	r3, [pc, #124]	; (80049fc <vTaskStartScheduler+0x84>)
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	2300      	movs	r3, #0
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	2300      	movs	r3, #0
 8004988:	2282      	movs	r2, #130	; 0x82
 800498a:	491d      	ldr	r1, [pc, #116]	; (8004a00 <vTaskStartScheduler+0x88>)
 800498c:	481d      	ldr	r0, [pc, #116]	; (8004a04 <vTaskStartScheduler+0x8c>)
 800498e:	f7ff fe03 	bl	8004598 <xTaskCreate>
 8004992:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d102      	bne.n	80049a0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800499a:	f000 fcff 	bl	800539c <xTimerCreateTimerTask>
 800499e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d116      	bne.n	80049d4 <vTaskStartScheduler+0x5c>
	__asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	60bb      	str	r3, [r7, #8]
}
 80049b8:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049ba:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <vTaskStartScheduler+0x90>)
 80049bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <vTaskStartScheduler+0x94>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049c8:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <vTaskStartScheduler+0x98>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049ce:	f001 f87f 	bl	8005ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049d2:	e00e      	b.n	80049f2 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049da:	d10a      	bne.n	80049f2 <vTaskStartScheduler+0x7a>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	607b      	str	r3, [r7, #4]
}
 80049ee:	bf00      	nop
 80049f0:	e7fe      	b.n	80049f0 <vTaskStartScheduler+0x78>
}
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	200002d0 	.word	0x200002d0
 8004a00:	08006be0 	.word	0x08006be0
 8004a04:	0800501d 	.word	0x0800501d
 8004a08:	200002cc 	.word	0x200002cc
 8004a0c:	200002b8 	.word	0x200002b8
 8004a10:	200002b0 	.word	0x200002b0

08004a14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a18:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <vTaskSuspendAll+0x18>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	4a03      	ldr	r2, [pc, #12]	; (8004a2c <vTaskSuspendAll+0x18>)
 8004a20:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004a22:	bf00      	nop
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	200002d4 	.word	0x200002d4

08004a30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a3e:	4b41      	ldr	r3, [pc, #260]	; (8004b44 <xTaskResumeAll+0x114>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <xTaskResumeAll+0x2c>
	__asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	603b      	str	r3, [r7, #0]
}
 8004a58:	bf00      	nop
 8004a5a:	e7fe      	b.n	8004a5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a5c:	f001 f8da 	bl	8005c14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a60:	4b38      	ldr	r3, [pc, #224]	; (8004b44 <xTaskResumeAll+0x114>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	4a37      	ldr	r2, [pc, #220]	; (8004b44 <xTaskResumeAll+0x114>)
 8004a68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a6a:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <xTaskResumeAll+0x114>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d161      	bne.n	8004b36 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a72:	4b35      	ldr	r3, [pc, #212]	; (8004b48 <xTaskResumeAll+0x118>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d05d      	beq.n	8004b36 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a7a:	e02e      	b.n	8004ada <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a7c:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <xTaskResumeAll+0x11c>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	3318      	adds	r3, #24
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff f8af 	bl	8003bec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3304      	adds	r3, #4
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff f8aa 	bl	8003bec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	4b2b      	ldr	r3, [pc, #172]	; (8004b50 <xTaskResumeAll+0x120>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	4a2a      	ldr	r2, [pc, #168]	; (8004b50 <xTaskResumeAll+0x120>)
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4a27      	ldr	r2, [pc, #156]	; (8004b54 <xTaskResumeAll+0x124>)
 8004ab8:	441a      	add	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f7ff f836 	bl	8003b32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aca:	4b23      	ldr	r3, [pc, #140]	; (8004b58 <xTaskResumeAll+0x128>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d302      	bcc.n	8004ada <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004ad4:	4b21      	ldr	r3, [pc, #132]	; (8004b5c <xTaskResumeAll+0x12c>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ada:	4b1c      	ldr	r3, [pc, #112]	; (8004b4c <xTaskResumeAll+0x11c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1cc      	bne.n	8004a7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ae8:	f000 fb2e 	bl	8005148 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004aec:	4b1c      	ldr	r3, [pc, #112]	; (8004b60 <xTaskResumeAll+0x130>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d010      	beq.n	8004b1a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004af8:	f000 f846 	bl	8004b88 <xTaskIncrementTick>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004b02:	4b16      	ldr	r3, [pc, #88]	; (8004b5c <xTaskResumeAll+0x12c>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f1      	bne.n	8004af8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004b14:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <xTaskResumeAll+0x130>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b1a:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <xTaskResumeAll+0x12c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b22:	2301      	movs	r3, #1
 8004b24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b26:	4b0f      	ldr	r3, [pc, #60]	; (8004b64 <xTaskResumeAll+0x134>)
 8004b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b36:	f001 f89d 	bl	8005c74 <vPortExitCritical>

	return xAlreadyYielded;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	200002d4 	.word	0x200002d4
 8004b48:	200002ac 	.word	0x200002ac
 8004b4c:	2000026c 	.word	0x2000026c
 8004b50:	200002b4 	.word	0x200002b4
 8004b54:	200001d8 	.word	0x200001d8
 8004b58:	200001d4 	.word	0x200001d4
 8004b5c:	200002c0 	.word	0x200002c0
 8004b60:	200002bc 	.word	0x200002bc
 8004b64:	e000ed04 	.word	0xe000ed04

08004b68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b6e:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <xTaskGetTickCount+0x1c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b74:	687b      	ldr	r3, [r7, #4]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	200002b0 	.word	0x200002b0

08004b88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b92:	4b4e      	ldr	r3, [pc, #312]	; (8004ccc <xTaskIncrementTick+0x144>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 8088 	bne.w	8004cac <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b9c:	4b4c      	ldr	r3, [pc, #304]	; (8004cd0 <xTaskIncrementTick+0x148>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ba4:	4a4a      	ldr	r2, [pc, #296]	; (8004cd0 <xTaskIncrementTick+0x148>)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d120      	bne.n	8004bf2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bb0:	4b48      	ldr	r3, [pc, #288]	; (8004cd4 <xTaskIncrementTick+0x14c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <xTaskIncrementTick+0x48>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	603b      	str	r3, [r7, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	e7fe      	b.n	8004bce <xTaskIncrementTick+0x46>
 8004bd0:	4b40      	ldr	r3, [pc, #256]	; (8004cd4 <xTaskIncrementTick+0x14c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	4b40      	ldr	r3, [pc, #256]	; (8004cd8 <xTaskIncrementTick+0x150>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a3e      	ldr	r2, [pc, #248]	; (8004cd4 <xTaskIncrementTick+0x14c>)
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	4a3e      	ldr	r2, [pc, #248]	; (8004cd8 <xTaskIncrementTick+0x150>)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	4b3d      	ldr	r3, [pc, #244]	; (8004cdc <xTaskIncrementTick+0x154>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3301      	adds	r3, #1
 8004bea:	4a3c      	ldr	r2, [pc, #240]	; (8004cdc <xTaskIncrementTick+0x154>)
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	f000 faab 	bl	8005148 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bf2:	4b3b      	ldr	r3, [pc, #236]	; (8004ce0 <xTaskIncrementTick+0x158>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d348      	bcc.n	8004c8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bfc:	4b35      	ldr	r3, [pc, #212]	; (8004cd4 <xTaskIncrementTick+0x14c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c06:	4b36      	ldr	r3, [pc, #216]	; (8004ce0 <xTaskIncrementTick+0x158>)
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c0c:	601a      	str	r2, [r3, #0]
					break;
 8004c0e:	e03e      	b.n	8004c8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c10:	4b30      	ldr	r3, [pc, #192]	; (8004cd4 <xTaskIncrementTick+0x14c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d203      	bcs.n	8004c30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c28:	4a2d      	ldr	r2, [pc, #180]	; (8004ce0 <xTaskIncrementTick+0x158>)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c2e:	e02e      	b.n	8004c8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fe ffd9 	bl	8003bec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d004      	beq.n	8004c4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	3318      	adds	r3, #24
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe ffd0 	bl	8003bec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	2201      	movs	r2, #1
 8004c52:	409a      	lsls	r2, r3
 8004c54:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <xTaskIncrementTick+0x15c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	4a22      	ldr	r2, [pc, #136]	; (8004ce4 <xTaskIncrementTick+0x15c>)
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4a1f      	ldr	r2, [pc, #124]	; (8004ce8 <xTaskIncrementTick+0x160>)
 8004c6c:	441a      	add	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f7fe ff5c 	bl	8003b32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7e:	4b1b      	ldr	r3, [pc, #108]	; (8004cec <xTaskIncrementTick+0x164>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d3b9      	bcc.n	8004bfc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c8c:	e7b6      	b.n	8004bfc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c8e:	4b17      	ldr	r3, [pc, #92]	; (8004cec <xTaskIncrementTick+0x164>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c94:	4914      	ldr	r1, [pc, #80]	; (8004ce8 <xTaskIncrementTick+0x160>)
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d907      	bls.n	8004cb6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	e004      	b.n	8004cb6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004cac:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <xTaskIncrementTick+0x168>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	4a0f      	ldr	r2, [pc, #60]	; (8004cf0 <xTaskIncrementTick+0x168>)
 8004cb4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004cb6:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <xTaskIncrementTick+0x16c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004cc2:	697b      	ldr	r3, [r7, #20]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	200002d4 	.word	0x200002d4
 8004cd0:	200002b0 	.word	0x200002b0
 8004cd4:	20000264 	.word	0x20000264
 8004cd8:	20000268 	.word	0x20000268
 8004cdc:	200002c4 	.word	0x200002c4
 8004ce0:	200002cc 	.word	0x200002cc
 8004ce4:	200002b4 	.word	0x200002b4
 8004ce8:	200001d8 	.word	0x200001d8
 8004cec:	200001d4 	.word	0x200001d4
 8004cf0:	200002bc 	.word	0x200002bc
 8004cf4:	200002c0 	.word	0x200002c0

08004cf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cfe:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <vTaskSwitchContext+0xa4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d06:	4b26      	ldr	r3, [pc, #152]	; (8004da0 <vTaskSwitchContext+0xa8>)
 8004d08:	2201      	movs	r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d0c:	e03f      	b.n	8004d8e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004d0e:	4b24      	ldr	r3, [pc, #144]	; (8004da0 <vTaskSwitchContext+0xa8>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d14:	4b23      	ldr	r3, [pc, #140]	; (8004da4 <vTaskSwitchContext+0xac>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	fab3 f383 	clz	r3, r3
 8004d20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d22:	7afb      	ldrb	r3, [r7, #11]
 8004d24:	f1c3 031f 	rsb	r3, r3, #31
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	491f      	ldr	r1, [pc, #124]	; (8004da8 <vTaskSwitchContext+0xb0>)
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	607b      	str	r3, [r7, #4]
}
 8004d50:	bf00      	nop
 8004d52:	e7fe      	b.n	8004d52 <vTaskSwitchContext+0x5a>
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4a12      	ldr	r2, [pc, #72]	; (8004da8 <vTaskSwitchContext+0xb0>)
 8004d60:	4413      	add	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	3308      	adds	r3, #8
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d104      	bne.n	8004d84 <vTaskSwitchContext+0x8c>
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	605a      	str	r2, [r3, #4]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	4a08      	ldr	r2, [pc, #32]	; (8004dac <vTaskSwitchContext+0xb4>)
 8004d8c:	6013      	str	r3, [r2, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	200002d4 	.word	0x200002d4
 8004da0:	200002c0 	.word	0x200002c0
 8004da4:	200002b4 	.word	0x200002b4
 8004da8:	200001d8 	.word	0x200001d8
 8004dac:	200001d4 	.word	0x200001d4

08004db0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	60fb      	str	r3, [r7, #12]
}
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dd6:	4b07      	ldr	r3, [pc, #28]	; (8004df4 <vTaskPlaceOnEventList+0x44>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3318      	adds	r3, #24
 8004ddc:	4619      	mov	r1, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fe fecb 	bl	8003b7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004de4:	2101      	movs	r1, #1
 8004de6:	6838      	ldr	r0, [r7, #0]
 8004de8:	f000 fa72 	bl	80052d0 <prvAddCurrentTaskToDelayedList>
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	200001d4 	.word	0x200001d4

08004df8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10a      	bne.n	8004e20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	617b      	str	r3, [r7, #20]
}
 8004e1c:	bf00      	nop
 8004e1e:	e7fe      	b.n	8004e1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e20:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <vTaskPlaceOnEventListRestricted+0x54>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3318      	adds	r3, #24
 8004e26:	4619      	mov	r1, r3
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f7fe fe82 	bl	8003b32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	68b8      	ldr	r0, [r7, #8]
 8004e3e:	f000 fa47 	bl	80052d0 <prvAddCurrentTaskToDelayedList>
	}
 8004e42:	bf00      	nop
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	200001d4 	.word	0x200001d4

08004e50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	60fb      	str	r3, [r7, #12]
}
 8004e78:	bf00      	nop
 8004e7a:	e7fe      	b.n	8004e7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	3318      	adds	r3, #24
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fe feb3 	bl	8003bec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e86:	4b1d      	ldr	r3, [pc, #116]	; (8004efc <xTaskRemoveFromEventList+0xac>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d11c      	bne.n	8004ec8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	3304      	adds	r3, #4
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fe feaa 	bl	8003bec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	4b17      	ldr	r3, [pc, #92]	; (8004f00 <xTaskRemoveFromEventList+0xb0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <xTaskRemoveFromEventList+0xb0>)
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <xTaskRemoveFromEventList+0xb4>)
 8004eb8:	441a      	add	r2, r3
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	f7fe fe36 	bl	8003b32 <vListInsertEnd>
 8004ec6:	e005      	b.n	8004ed4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	3318      	adds	r3, #24
 8004ecc:	4619      	mov	r1, r3
 8004ece:	480e      	ldr	r0, [pc, #56]	; (8004f08 <xTaskRemoveFromEventList+0xb8>)
 8004ed0:	f7fe fe2f 	bl	8003b32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <xTaskRemoveFromEventList+0xbc>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d905      	bls.n	8004eee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <xTaskRemoveFromEventList+0xc0>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	e001      	b.n	8004ef2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ef2:	697b      	ldr	r3, [r7, #20]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	200002d4 	.word	0x200002d4
 8004f00:	200002b4 	.word	0x200002b4
 8004f04:	200001d8 	.word	0x200001d8
 8004f08:	2000026c 	.word	0x2000026c
 8004f0c:	200001d4 	.word	0x200001d4
 8004f10:	200002c0 	.word	0x200002c0

08004f14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f1c:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <vTaskInternalSetTimeOutState+0x24>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f24:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <vTaskInternalSetTimeOutState+0x28>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	605a      	str	r2, [r3, #4]
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	200002c4 	.word	0x200002c4
 8004f3c:	200002b0 	.word	0x200002b0

08004f40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10a      	bne.n	8004f66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	613b      	str	r3, [r7, #16]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	60fb      	str	r3, [r7, #12]
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004f82:	f000 fe47 	bl	8005c14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f86:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <xTaskCheckForTimeOut+0xbc>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f9e:	d102      	bne.n	8004fa6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	e023      	b.n	8004fee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4b15      	ldr	r3, [pc, #84]	; (8005000 <xTaskCheckForTimeOut+0xc0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d007      	beq.n	8004fc2 <xTaskCheckForTimeOut+0x82>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d302      	bcc.n	8004fc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	e015      	b.n	8004fee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d20b      	bcs.n	8004fe4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	1ad2      	subs	r2, r2, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff ff9b 	bl	8004f14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	e004      	b.n	8004fee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fea:	2301      	movs	r3, #1
 8004fec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004fee:	f000 fe41 	bl	8005c74 <vPortExitCritical>

	return xReturn;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	200002b0 	.word	0x200002b0
 8005000:	200002c4 	.word	0x200002c4

08005004 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005008:	4b03      	ldr	r3, [pc, #12]	; (8005018 <vTaskMissedYield+0x14>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]
}
 800500e:	bf00      	nop
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	200002c0 	.word	0x200002c0

0800501c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005024:	f000 f852 	bl	80050cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <prvIdleTask+0x28>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d9f9      	bls.n	8005024 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005030:	4b05      	ldr	r3, [pc, #20]	; (8005048 <prvIdleTask+0x2c>)
 8005032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005040:	e7f0      	b.n	8005024 <prvIdleTask+0x8>
 8005042:	bf00      	nop
 8005044:	200001d8 	.word	0x200001d8
 8005048:	e000ed04 	.word	0xe000ed04

0800504c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005052:	2300      	movs	r3, #0
 8005054:	607b      	str	r3, [r7, #4]
 8005056:	e00c      	b.n	8005072 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4a12      	ldr	r2, [pc, #72]	; (80050ac <prvInitialiseTaskLists+0x60>)
 8005064:	4413      	add	r3, r2
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe fd36 	bl	8003ad8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3301      	adds	r3, #1
 8005070:	607b      	str	r3, [r7, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b04      	cmp	r3, #4
 8005076:	d9ef      	bls.n	8005058 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005078:	480d      	ldr	r0, [pc, #52]	; (80050b0 <prvInitialiseTaskLists+0x64>)
 800507a:	f7fe fd2d 	bl	8003ad8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800507e:	480d      	ldr	r0, [pc, #52]	; (80050b4 <prvInitialiseTaskLists+0x68>)
 8005080:	f7fe fd2a 	bl	8003ad8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005084:	480c      	ldr	r0, [pc, #48]	; (80050b8 <prvInitialiseTaskLists+0x6c>)
 8005086:	f7fe fd27 	bl	8003ad8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800508a:	480c      	ldr	r0, [pc, #48]	; (80050bc <prvInitialiseTaskLists+0x70>)
 800508c:	f7fe fd24 	bl	8003ad8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005090:	480b      	ldr	r0, [pc, #44]	; (80050c0 <prvInitialiseTaskLists+0x74>)
 8005092:	f7fe fd21 	bl	8003ad8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005096:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <prvInitialiseTaskLists+0x78>)
 8005098:	4a05      	ldr	r2, [pc, #20]	; (80050b0 <prvInitialiseTaskLists+0x64>)
 800509a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <prvInitialiseTaskLists+0x7c>)
 800509e:	4a05      	ldr	r2, [pc, #20]	; (80050b4 <prvInitialiseTaskLists+0x68>)
 80050a0:	601a      	str	r2, [r3, #0]
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	200001d8 	.word	0x200001d8
 80050b0:	2000023c 	.word	0x2000023c
 80050b4:	20000250 	.word	0x20000250
 80050b8:	2000026c 	.word	0x2000026c
 80050bc:	20000280 	.word	0x20000280
 80050c0:	20000298 	.word	0x20000298
 80050c4:	20000264 	.word	0x20000264
 80050c8:	20000268 	.word	0x20000268

080050cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050d2:	e019      	b.n	8005108 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050d4:	f000 fd9e 	bl	8005c14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050d8:	4b10      	ldr	r3, [pc, #64]	; (800511c <prvCheckTasksWaitingTermination+0x50>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fe fd81 	bl	8003bec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050ea:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <prvCheckTasksWaitingTermination+0x54>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	4a0b      	ldr	r2, [pc, #44]	; (8005120 <prvCheckTasksWaitingTermination+0x54>)
 80050f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <prvCheckTasksWaitingTermination+0x58>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	4a0a      	ldr	r2, [pc, #40]	; (8005124 <prvCheckTasksWaitingTermination+0x58>)
 80050fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050fe:	f000 fdb9 	bl	8005c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f810 	bl	8005128 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005108:	4b06      	ldr	r3, [pc, #24]	; (8005124 <prvCheckTasksWaitingTermination+0x58>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e1      	bne.n	80050d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005110:	bf00      	nop
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000280 	.word	0x20000280
 8005120:	200002ac 	.word	0x200002ac
 8005124:	20000294 	.word	0x20000294

08005128 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	4618      	mov	r0, r3
 8005136:	f000 ff53 	bl	8005fe0 <vPortFree>
			vPortFree( pxTCB );
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 ff50 	bl	8005fe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005140:	bf00      	nop
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800514e:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <prvResetNextTaskUnblockTime+0x38>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d104      	bne.n	8005162 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <prvResetNextTaskUnblockTime+0x3c>)
 800515a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800515e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005160:	e008      	b.n	8005174 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005162:	4b07      	ldr	r3, [pc, #28]	; (8005180 <prvResetNextTaskUnblockTime+0x38>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a04      	ldr	r2, [pc, #16]	; (8005184 <prvResetNextTaskUnblockTime+0x3c>)
 8005172:	6013      	str	r3, [r2, #0]
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	20000264 	.word	0x20000264
 8005184:	200002cc 	.word	0x200002cc

08005188 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800518e:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <xTaskGetSchedulerState+0x34>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d102      	bne.n	800519c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005196:	2301      	movs	r3, #1
 8005198:	607b      	str	r3, [r7, #4]
 800519a:	e008      	b.n	80051ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800519c:	4b08      	ldr	r3, [pc, #32]	; (80051c0 <xTaskGetSchedulerState+0x38>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051a4:	2302      	movs	r3, #2
 80051a6:	607b      	str	r3, [r7, #4]
 80051a8:	e001      	b.n	80051ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051aa:	2300      	movs	r3, #0
 80051ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051ae:	687b      	ldr	r3, [r7, #4]
	}
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	200002b8 	.word	0x200002b8
 80051c0:	200002d4 	.word	0x200002d4

080051c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d06e      	beq.n	80052b8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80051da:	4b3a      	ldr	r3, [pc, #232]	; (80052c4 <xTaskPriorityDisinherit+0x100>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d00a      	beq.n	80051fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	60fb      	str	r3, [r7, #12]
}
 80051f6:	bf00      	nop
 80051f8:	e7fe      	b.n	80051f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	60bb      	str	r3, [r7, #8]
}
 8005214:	bf00      	nop
 8005216:	e7fe      	b.n	8005216 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521c:	1e5a      	subs	r2, r3, #1
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800522a:	429a      	cmp	r2, r3
 800522c:	d044      	beq.n	80052b8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d140      	bne.n	80052b8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	3304      	adds	r3, #4
 800523a:	4618      	mov	r0, r3
 800523c:	f7fe fcd6 	bl	8003bec <uxListRemove>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d115      	bne.n	8005272 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524a:	491f      	ldr	r1, [pc, #124]	; (80052c8 <xTaskPriorityDisinherit+0x104>)
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	440b      	add	r3, r1
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <xTaskPriorityDisinherit+0xae>
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	2201      	movs	r2, #1
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	43da      	mvns	r2, r3
 8005268:	4b18      	ldr	r3, [pc, #96]	; (80052cc <xTaskPriorityDisinherit+0x108>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4013      	ands	r3, r2
 800526e:	4a17      	ldr	r2, [pc, #92]	; (80052cc <xTaskPriorityDisinherit+0x108>)
 8005270:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	f1c3 0205 	rsb	r2, r3, #5
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	2201      	movs	r2, #1
 800528c:	409a      	lsls	r2, r3
 800528e:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <xTaskPriorityDisinherit+0x108>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4313      	orrs	r3, r2
 8005294:	4a0d      	ldr	r2, [pc, #52]	; (80052cc <xTaskPriorityDisinherit+0x108>)
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4a08      	ldr	r2, [pc, #32]	; (80052c8 <xTaskPriorityDisinherit+0x104>)
 80052a6:	441a      	add	r2, r3
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f7fe fc3f 	bl	8003b32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052b4:	2301      	movs	r3, #1
 80052b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052b8:	697b      	ldr	r3, [r7, #20]
	}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200001d4 	.word	0x200001d4
 80052c8:	200001d8 	.word	0x200001d8
 80052cc:	200002b4 	.word	0x200002b4

080052d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052da:	4b29      	ldr	r3, [pc, #164]	; (8005380 <prvAddCurrentTaskToDelayedList+0xb0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052e0:	4b28      	ldr	r3, [pc, #160]	; (8005384 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe fc80 	bl	8003bec <uxListRemove>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10b      	bne.n	800530a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80052f2:	4b24      	ldr	r3, [pc, #144]	; (8005384 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	2201      	movs	r2, #1
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	43da      	mvns	r2, r3
 8005300:	4b21      	ldr	r3, [pc, #132]	; (8005388 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4013      	ands	r3, r2
 8005306:	4a20      	ldr	r2, [pc, #128]	; (8005388 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005308:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005310:	d10a      	bne.n	8005328 <prvAddCurrentTaskToDelayedList+0x58>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d007      	beq.n	8005328 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005318:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <prvAddCurrentTaskToDelayedList+0xb4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3304      	adds	r3, #4
 800531e:	4619      	mov	r1, r3
 8005320:	481a      	ldr	r0, [pc, #104]	; (800538c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005322:	f7fe fc06 	bl	8003b32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005326:	e026      	b.n	8005376 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4413      	add	r3, r2
 800532e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005330:	4b14      	ldr	r3, [pc, #80]	; (8005384 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	429a      	cmp	r2, r3
 800533e:	d209      	bcs.n	8005354 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005340:	4b13      	ldr	r3, [pc, #76]	; (8005390 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3304      	adds	r3, #4
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f7fe fc14 	bl	8003b7a <vListInsert>
}
 8005352:	e010      	b.n	8005376 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005354:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <prvAddCurrentTaskToDelayedList+0xb4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3304      	adds	r3, #4
 800535e:	4619      	mov	r1, r3
 8005360:	4610      	mov	r0, r2
 8005362:	f7fe fc0a 	bl	8003b7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005366:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	429a      	cmp	r2, r3
 800536e:	d202      	bcs.n	8005376 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005370:	4a09      	ldr	r2, [pc, #36]	; (8005398 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	6013      	str	r3, [r2, #0]
}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	200002b0 	.word	0x200002b0
 8005384:	200001d4 	.word	0x200001d4
 8005388:	200002b4 	.word	0x200002b4
 800538c:	20000298 	.word	0x20000298
 8005390:	20000268 	.word	0x20000268
 8005394:	20000264 	.word	0x20000264
 8005398:	200002cc 	.word	0x200002cc

0800539c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053a6:	f000 fad5 	bl	8005954 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053aa:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <xTimerCreateTimerTask+0x54>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00b      	beq.n	80053ca <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80053b2:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <xTimerCreateTimerTask+0x58>)
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	2302      	movs	r3, #2
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	2300      	movs	r3, #0
 80053bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80053c0:	490d      	ldr	r1, [pc, #52]	; (80053f8 <xTimerCreateTimerTask+0x5c>)
 80053c2:	480e      	ldr	r0, [pc, #56]	; (80053fc <xTimerCreateTimerTask+0x60>)
 80053c4:	f7ff f8e8 	bl	8004598 <xTaskCreate>
 80053c8:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	603b      	str	r3, [r7, #0]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80053e6:	687b      	ldr	r3, [r7, #4]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20000308 	.word	0x20000308
 80053f4:	2000030c 	.word	0x2000030c
 80053f8:	08006be8 	.word	0x08006be8
 80053fc:	08005535 	.word	0x08005535

08005400 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08a      	sub	sp, #40	; 0x28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800540e:	2300      	movs	r3, #0
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	623b      	str	r3, [r7, #32]
}
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800542e:	4b1a      	ldr	r3, [pc, #104]	; (8005498 <xTimerGenericCommand+0x98>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d02a      	beq.n	800548c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b05      	cmp	r3, #5
 8005446:	dc18      	bgt.n	800547a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005448:	f7ff fe9e 	bl	8005188 <xTaskGetSchedulerState>
 800544c:	4603      	mov	r3, r0
 800544e:	2b02      	cmp	r3, #2
 8005450:	d109      	bne.n	8005466 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005452:	4b11      	ldr	r3, [pc, #68]	; (8005498 <xTimerGenericCommand+0x98>)
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	f107 0114 	add.w	r1, r7, #20
 800545a:	2300      	movs	r3, #0
 800545c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800545e:	f7fe fcb7 	bl	8003dd0 <xQueueGenericSend>
 8005462:	6278      	str	r0, [r7, #36]	; 0x24
 8005464:	e012      	b.n	800548c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005466:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <xTimerGenericCommand+0x98>)
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	f107 0114 	add.w	r1, r7, #20
 800546e:	2300      	movs	r3, #0
 8005470:	2200      	movs	r2, #0
 8005472:	f7fe fcad 	bl	8003dd0 <xQueueGenericSend>
 8005476:	6278      	str	r0, [r7, #36]	; 0x24
 8005478:	e008      	b.n	800548c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800547a:	4b07      	ldr	r3, [pc, #28]	; (8005498 <xTimerGenericCommand+0x98>)
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	f107 0114 	add.w	r1, r7, #20
 8005482:	2300      	movs	r3, #0
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	f7fe fda1 	bl	8003fcc <xQueueGenericSendFromISR>
 800548a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800548e:	4618      	mov	r0, r3
 8005490:	3728      	adds	r7, #40	; 0x28
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000308 	.word	0x20000308

0800549c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054a6:	4b22      	ldr	r3, [pc, #136]	; (8005530 <prvProcessExpiredTimer+0x94>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fe fb99 	bl	8003bec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d022      	beq.n	800550e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	699a      	ldr	r2, [r3, #24]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	18d1      	adds	r1, r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	6978      	ldr	r0, [r7, #20]
 80054d6:	f000 f8d1 	bl	800567c <prvInsertTimerInActiveList>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01f      	beq.n	8005520 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054e0:	2300      	movs	r3, #0
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	2300      	movs	r3, #0
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	2100      	movs	r1, #0
 80054ea:	6978      	ldr	r0, [r7, #20]
 80054ec:	f7ff ff88 	bl	8005400 <xTimerGenericCommand>
 80054f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d113      	bne.n	8005520 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	60fb      	str	r3, [r7, #12]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005514:	f023 0301 	bic.w	r3, r3, #1
 8005518:	b2da      	uxtb	r2, r3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	6978      	ldr	r0, [r7, #20]
 8005526:	4798      	blx	r3
}
 8005528:	bf00      	nop
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20000300 	.word	0x20000300

08005534 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800553c:	f107 0308 	add.w	r3, r7, #8
 8005540:	4618      	mov	r0, r3
 8005542:	f000 f857 	bl	80055f4 <prvGetNextExpireTime>
 8005546:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4619      	mov	r1, r3
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 f803 	bl	8005558 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005552:	f000 f8d5 	bl	8005700 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005556:	e7f1      	b.n	800553c <prvTimerTask+0x8>

08005558 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005562:	f7ff fa57 	bl	8004a14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005566:	f107 0308 	add.w	r3, r7, #8
 800556a:	4618      	mov	r0, r3
 800556c:	f000 f866 	bl	800563c <prvSampleTimeNow>
 8005570:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d130      	bne.n	80055da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10a      	bne.n	8005594 <prvProcessTimerOrBlockTask+0x3c>
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	429a      	cmp	r2, r3
 8005584:	d806      	bhi.n	8005594 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005586:	f7ff fa53 	bl	8004a30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ff85 	bl	800549c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005592:	e024      	b.n	80055de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800559a:	4b13      	ldr	r3, [pc, #76]	; (80055e8 <prvProcessTimerOrBlockTask+0x90>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <prvProcessTimerOrBlockTask+0x50>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <prvProcessTimerOrBlockTask+0x52>
 80055a8:	2300      	movs	r3, #0
 80055aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055ac:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <prvProcessTimerOrBlockTask+0x94>)
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	4619      	mov	r1, r3
 80055ba:	f7fe ffb9 	bl	8004530 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055be:	f7ff fa37 	bl	8004a30 <xTaskResumeAll>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055c8:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <prvProcessTimerOrBlockTask+0x98>)
 80055ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	f3bf 8f6f 	isb	sy
}
 80055d8:	e001      	b.n	80055de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80055da:	f7ff fa29 	bl	8004a30 <xTaskResumeAll>
}
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20000304 	.word	0x20000304
 80055ec:	20000308 	.word	0x20000308
 80055f0:	e000ed04 	.word	0xe000ed04

080055f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055fc:	4b0e      	ldr	r3, [pc, #56]	; (8005638 <prvGetNextExpireTime+0x44>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <prvGetNextExpireTime+0x16>
 8005606:	2201      	movs	r2, #1
 8005608:	e000      	b.n	800560c <prvGetNextExpireTime+0x18>
 800560a:	2200      	movs	r2, #0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d105      	bne.n	8005624 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005618:	4b07      	ldr	r3, [pc, #28]	; (8005638 <prvGetNextExpireTime+0x44>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e001      	b.n	8005628 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005628:	68fb      	ldr	r3, [r7, #12]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000300 	.word	0x20000300

0800563c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005644:	f7ff fa90 	bl	8004b68 <xTaskGetTickCount>
 8005648:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800564a:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <prvSampleTimeNow+0x3c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	429a      	cmp	r2, r3
 8005652:	d205      	bcs.n	8005660 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005654:	f000 f91a 	bl	800588c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e002      	b.n	8005666 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005666:	4a04      	ldr	r2, [pc, #16]	; (8005678 <prvSampleTimeNow+0x3c>)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800566c:	68fb      	ldr	r3, [r7, #12]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20000310 	.word	0x20000310

0800567c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800568a:	2300      	movs	r3, #0
 800568c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d812      	bhi.n	80056c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	1ad2      	subs	r2, r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d302      	bcc.n	80056b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056b0:	2301      	movs	r3, #1
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	e01b      	b.n	80056ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056b6:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <prvInsertTimerInActiveList+0x7c>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3304      	adds	r3, #4
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f7fe fa5a 	bl	8003b7a <vListInsert>
 80056c6:	e012      	b.n	80056ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d206      	bcs.n	80056de <prvInsertTimerInActiveList+0x62>
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d302      	bcc.n	80056de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056d8:	2301      	movs	r3, #1
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	e007      	b.n	80056ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056de:	4b07      	ldr	r3, [pc, #28]	; (80056fc <prvInsertTimerInActiveList+0x80>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3304      	adds	r3, #4
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f7fe fa46 	bl	8003b7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80056ee:	697b      	ldr	r3, [r7, #20]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20000304 	.word	0x20000304
 80056fc:	20000300 	.word	0x20000300

08005700 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08c      	sub	sp, #48	; 0x30
 8005704:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005706:	e0ae      	b.n	8005866 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	f2c0 80aa 	blt.w	8005864 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d004      	beq.n	8005726 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	3304      	adds	r3, #4
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe fa63 	bl	8003bec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005726:	1d3b      	adds	r3, r7, #4
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff ff87 	bl	800563c <prvSampleTimeNow>
 800572e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b09      	cmp	r3, #9
 8005734:	f200 8097 	bhi.w	8005866 <prvProcessReceivedCommands+0x166>
 8005738:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <prvProcessReceivedCommands+0x40>)
 800573a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573e:	bf00      	nop
 8005740:	08005769 	.word	0x08005769
 8005744:	08005769 	.word	0x08005769
 8005748:	08005769 	.word	0x08005769
 800574c:	080057dd 	.word	0x080057dd
 8005750:	080057f1 	.word	0x080057f1
 8005754:	0800583b 	.word	0x0800583b
 8005758:	08005769 	.word	0x08005769
 800575c:	08005769 	.word	0x08005769
 8005760:	080057dd 	.word	0x080057dd
 8005764:	080057f1 	.word	0x080057f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	b2da      	uxtb	r2, r3
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	18d1      	adds	r1, r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a3a      	ldr	r2, [r7, #32]
 8005786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005788:	f7ff ff78 	bl	800567c <prvInsertTimerInActiveList>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d069      	beq.n	8005866 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005798:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d05e      	beq.n	8005866 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	441a      	add	r2, r3
 80057b0:	2300      	movs	r3, #0
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	2300      	movs	r3, #0
 80057b6:	2100      	movs	r1, #0
 80057b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057ba:	f7ff fe21 	bl	8005400 <xTimerGenericCommand>
 80057be:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d14f      	bne.n	8005866 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	61bb      	str	r3, [r7, #24]
}
 80057d8:	bf00      	nop
 80057da:	e7fe      	b.n	80057da <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057e2:	f023 0301 	bic.w	r3, r3, #1
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80057ee:	e03a      	b.n	8005866 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057f6:	f043 0301 	orr.w	r3, r3, #1
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	617b      	str	r3, [r7, #20]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	18d1      	adds	r1, r2, r3
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	6a3a      	ldr	r2, [r7, #32]
 8005832:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005834:	f7ff ff22 	bl	800567c <prvInsertTimerInActiveList>
					break;
 8005838:	e015      	b.n	8005866 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d103      	bne.n	8005850 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8005848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800584a:	f000 fbc9 	bl	8005fe0 <vPortFree>
 800584e:	e00a      	b.n	8005866 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005856:	f023 0301 	bic.w	r3, r3, #1
 800585a:	b2da      	uxtb	r2, r3
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005862:	e000      	b.n	8005866 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005864:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005866:	4b08      	ldr	r3, [pc, #32]	; (8005888 <prvProcessReceivedCommands+0x188>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f107 0108 	add.w	r1, r7, #8
 800586e:	2200      	movs	r2, #0
 8005870:	4618      	mov	r0, r3
 8005872:	f7fe fc43 	bl	80040fc <xQueueReceive>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	f47f af45 	bne.w	8005708 <prvProcessReceivedCommands+0x8>
	}
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	3728      	adds	r7, #40	; 0x28
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20000308 	.word	0x20000308

0800588c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005892:	e048      	b.n	8005926 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005894:	4b2d      	ldr	r3, [pc, #180]	; (800594c <prvSwitchTimerLists+0xc0>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800589e:	4b2b      	ldr	r3, [pc, #172]	; (800594c <prvSwitchTimerLists+0xc0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fe f99d 	bl	8003bec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d02e      	beq.n	8005926 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	4413      	add	r3, r2
 80058d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d90e      	bls.n	80058f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058e6:	4b19      	ldr	r3, [pc, #100]	; (800594c <prvSwitchTimerLists+0xc0>)
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3304      	adds	r3, #4
 80058ee:	4619      	mov	r1, r3
 80058f0:	4610      	mov	r0, r2
 80058f2:	f7fe f942 	bl	8003b7a <vListInsert>
 80058f6:	e016      	b.n	8005926 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058f8:	2300      	movs	r3, #0
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	2300      	movs	r3, #0
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	2100      	movs	r1, #0
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f7ff fd7c 	bl	8005400 <xTimerGenericCommand>
 8005908:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	603b      	str	r3, [r7, #0]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005926:	4b09      	ldr	r3, [pc, #36]	; (800594c <prvSwitchTimerLists+0xc0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1b1      	bne.n	8005894 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005930:	4b06      	ldr	r3, [pc, #24]	; (800594c <prvSwitchTimerLists+0xc0>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <prvSwitchTimerLists+0xc4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a04      	ldr	r2, [pc, #16]	; (800594c <prvSwitchTimerLists+0xc0>)
 800593c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800593e:	4a04      	ldr	r2, [pc, #16]	; (8005950 <prvSwitchTimerLists+0xc4>)
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	6013      	str	r3, [r2, #0]
}
 8005944:	bf00      	nop
 8005946:	3718      	adds	r7, #24
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000300 	.word	0x20000300
 8005950:	20000304 	.word	0x20000304

08005954 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005958:	f000 f95c 	bl	8005c14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800595c:	4b12      	ldr	r3, [pc, #72]	; (80059a8 <prvCheckForValidListAndQueue+0x54>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d11d      	bne.n	80059a0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005964:	4811      	ldr	r0, [pc, #68]	; (80059ac <prvCheckForValidListAndQueue+0x58>)
 8005966:	f7fe f8b7 	bl	8003ad8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800596a:	4811      	ldr	r0, [pc, #68]	; (80059b0 <prvCheckForValidListAndQueue+0x5c>)
 800596c:	f7fe f8b4 	bl	8003ad8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005970:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <prvCheckForValidListAndQueue+0x60>)
 8005972:	4a0e      	ldr	r2, [pc, #56]	; (80059ac <prvCheckForValidListAndQueue+0x58>)
 8005974:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005976:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <prvCheckForValidListAndQueue+0x64>)
 8005978:	4a0d      	ldr	r2, [pc, #52]	; (80059b0 <prvCheckForValidListAndQueue+0x5c>)
 800597a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800597c:	2200      	movs	r2, #0
 800597e:	210c      	movs	r1, #12
 8005980:	200a      	movs	r0, #10
 8005982:	f7fe f9c5 	bl	8003d10 <xQueueGenericCreate>
 8005986:	4603      	mov	r3, r0
 8005988:	4a07      	ldr	r2, [pc, #28]	; (80059a8 <prvCheckForValidListAndQueue+0x54>)
 800598a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800598c:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <prvCheckForValidListAndQueue+0x54>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005994:	4b04      	ldr	r3, [pc, #16]	; (80059a8 <prvCheckForValidListAndQueue+0x54>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4908      	ldr	r1, [pc, #32]	; (80059bc <prvCheckForValidListAndQueue+0x68>)
 800599a:	4618      	mov	r0, r3
 800599c:	f7fe fd9e 	bl	80044dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059a0:	f000 f968 	bl	8005c74 <vPortExitCritical>
}
 80059a4:	bf00      	nop
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	20000308 	.word	0x20000308
 80059ac:	200002d8 	.word	0x200002d8
 80059b0:	200002ec 	.word	0x200002ec
 80059b4:	20000300 	.word	0x20000300
 80059b8:	20000304 	.word	0x20000304
 80059bc:	08006bf0 	.word	0x08006bf0

080059c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3b04      	subs	r3, #4
 80059d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3b04      	subs	r3, #4
 80059de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3b04      	subs	r3, #4
 80059ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059f0:	4a0c      	ldr	r2, [pc, #48]	; (8005a24 <pxPortInitialiseStack+0x64>)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3b14      	subs	r3, #20
 80059fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3b04      	subs	r3, #4
 8005a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f06f 0202 	mvn.w	r2, #2
 8005a0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3b20      	subs	r3, #32
 8005a14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a16:	68fb      	ldr	r3, [r7, #12]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	08005a29 	.word	0x08005a29

08005a28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a32:	4b12      	ldr	r3, [pc, #72]	; (8005a7c <prvTaskExitError+0x54>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a3a:	d00a      	beq.n	8005a52 <prvTaskExitError+0x2a>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	60fb      	str	r3, [r7, #12]
}
 8005a4e:	bf00      	nop
 8005a50:	e7fe      	b.n	8005a50 <prvTaskExitError+0x28>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	60bb      	str	r3, [r7, #8]
}
 8005a64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a66:	bf00      	nop
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0fc      	beq.n	8005a68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a6e:	bf00      	nop
 8005a70:	bf00      	nop
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	2000000c 	.word	0x2000000c

08005a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a80:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <pxCurrentTCBConst2>)
 8005a82:	6819      	ldr	r1, [r3, #0]
 8005a84:	6808      	ldr	r0, [r1, #0]
 8005a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a8a:	f380 8809 	msr	PSP, r0
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f04f 0000 	mov.w	r0, #0
 8005a96:	f380 8811 	msr	BASEPRI, r0
 8005a9a:	4770      	bx	lr
 8005a9c:	f3af 8000 	nop.w

08005aa0 <pxCurrentTCBConst2>:
 8005aa0:	200001d4 	.word	0x200001d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop

08005aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005aa8:	4808      	ldr	r0, [pc, #32]	; (8005acc <prvPortStartFirstTask+0x24>)
 8005aaa:	6800      	ldr	r0, [r0, #0]
 8005aac:	6800      	ldr	r0, [r0, #0]
 8005aae:	f380 8808 	msr	MSP, r0
 8005ab2:	f04f 0000 	mov.w	r0, #0
 8005ab6:	f380 8814 	msr	CONTROL, r0
 8005aba:	b662      	cpsie	i
 8005abc:	b661      	cpsie	f
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	df00      	svc	0
 8005ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005aca:	bf00      	nop
 8005acc:	e000ed08 	.word	0xe000ed08

08005ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ad6:	4b46      	ldr	r3, [pc, #280]	; (8005bf0 <xPortStartScheduler+0x120>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a46      	ldr	r2, [pc, #280]	; (8005bf4 <xPortStartScheduler+0x124>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d10a      	bne.n	8005af6 <xPortStartScheduler+0x26>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	613b      	str	r3, [r7, #16]
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005af6:	4b3e      	ldr	r3, [pc, #248]	; (8005bf0 <xPortStartScheduler+0x120>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a3f      	ldr	r2, [pc, #252]	; (8005bf8 <xPortStartScheduler+0x128>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d10a      	bne.n	8005b16 <xPortStartScheduler+0x46>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	60fb      	str	r3, [r7, #12]
}
 8005b12:	bf00      	nop
 8005b14:	e7fe      	b.n	8005b14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b16:	4b39      	ldr	r3, [pc, #228]	; (8005bfc <xPortStartScheduler+0x12c>)
 8005b18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	22ff      	movs	r2, #255	; 0xff
 8005b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b30:	78fb      	ldrb	r3, [r7, #3]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <xPortStartScheduler+0x130>)
 8005b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b3e:	4b31      	ldr	r3, [pc, #196]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b40:	2207      	movs	r2, #7
 8005b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b44:	e009      	b.n	8005b5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005b46:	4b2f      	ldr	r3, [pc, #188]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	4a2d      	ldr	r2, [pc, #180]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b5a:	78fb      	ldrb	r3, [r7, #3]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b62:	2b80      	cmp	r3, #128	; 0x80
 8005b64:	d0ef      	beq.n	8005b46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b66:	4b27      	ldr	r3, [pc, #156]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f1c3 0307 	rsb	r3, r3, #7
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d00a      	beq.n	8005b88 <xPortStartScheduler+0xb8>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	60bb      	str	r3, [r7, #8]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b88:	4b1e      	ldr	r3, [pc, #120]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	021b      	lsls	r3, r3, #8
 8005b8e:	4a1d      	ldr	r2, [pc, #116]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b92:	4b1c      	ldr	r3, [pc, #112]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b9a:	4a1a      	ldr	r2, [pc, #104]	; (8005c04 <xPortStartScheduler+0x134>)
 8005b9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ba6:	4b18      	ldr	r3, [pc, #96]	; (8005c08 <xPortStartScheduler+0x138>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a17      	ldr	r2, [pc, #92]	; (8005c08 <xPortStartScheduler+0x138>)
 8005bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005bb2:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <xPortStartScheduler+0x138>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <xPortStartScheduler+0x138>)
 8005bb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005bbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005bbe:	f000 f8dd 	bl	8005d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bc2:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <xPortStartScheduler+0x13c>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005bc8:	f000 f8fc 	bl	8005dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005bcc:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <xPortStartScheduler+0x140>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a0f      	ldr	r2, [pc, #60]	; (8005c10 <xPortStartScheduler+0x140>)
 8005bd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005bd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005bd8:	f7ff ff66 	bl	8005aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bdc:	f7ff f88c 	bl	8004cf8 <vTaskSwitchContext>
	prvTaskExitError();
 8005be0:	f7ff ff22 	bl	8005a28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	e000ed00 	.word	0xe000ed00
 8005bf4:	410fc271 	.word	0x410fc271
 8005bf8:	410fc270 	.word	0x410fc270
 8005bfc:	e000e400 	.word	0xe000e400
 8005c00:	20000314 	.word	0x20000314
 8005c04:	20000318 	.word	0x20000318
 8005c08:	e000ed20 	.word	0xe000ed20
 8005c0c:	2000000c 	.word	0x2000000c
 8005c10:	e000ef34 	.word	0xe000ef34

08005c14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	607b      	str	r3, [r7, #4]
}
 8005c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c2e:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <vPortEnterCritical+0x58>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3301      	adds	r3, #1
 8005c34:	4a0d      	ldr	r2, [pc, #52]	; (8005c6c <vPortEnterCritical+0x58>)
 8005c36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c38:	4b0c      	ldr	r3, [pc, #48]	; (8005c6c <vPortEnterCritical+0x58>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d10f      	bne.n	8005c60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c40:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <vPortEnterCritical+0x5c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <vPortEnterCritical+0x4c>
	__asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	603b      	str	r3, [r7, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	e7fe      	b.n	8005c5e <vPortEnterCritical+0x4a>
	}
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	2000000c 	.word	0x2000000c
 8005c70:	e000ed04 	.word	0xe000ed04

08005c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c7a:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <vPortExitCritical+0x50>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <vPortExitCritical+0x24>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	607b      	str	r3, [r7, #4]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c98:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <vPortExitCritical+0x50>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	4a09      	ldr	r2, [pc, #36]	; (8005cc4 <vPortExitCritical+0x50>)
 8005ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ca2:	4b08      	ldr	r3, [pc, #32]	; (8005cc4 <vPortExitCritical+0x50>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d105      	bne.n	8005cb6 <vPortExitCritical+0x42>
 8005caa:	2300      	movs	r3, #0
 8005cac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	f383 8811 	msr	BASEPRI, r3
}
 8005cb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	2000000c 	.word	0x2000000c
	...

08005cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005cd0:	f3ef 8009 	mrs	r0, PSP
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	4b15      	ldr	r3, [pc, #84]	; (8005d30 <pxCurrentTCBConst>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	f01e 0f10 	tst.w	lr, #16
 8005ce0:	bf08      	it	eq
 8005ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cea:	6010      	str	r0, [r2, #0]
 8005cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005cf4:	f380 8811 	msr	BASEPRI, r0
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f7fe fffa 	bl	8004cf8 <vTaskSwitchContext>
 8005d04:	f04f 0000 	mov.w	r0, #0
 8005d08:	f380 8811 	msr	BASEPRI, r0
 8005d0c:	bc09      	pop	{r0, r3}
 8005d0e:	6819      	ldr	r1, [r3, #0]
 8005d10:	6808      	ldr	r0, [r1, #0]
 8005d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d16:	f01e 0f10 	tst.w	lr, #16
 8005d1a:	bf08      	it	eq
 8005d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d20:	f380 8809 	msr	PSP, r0
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	f3af 8000 	nop.w

08005d30 <pxCurrentTCBConst>:
 8005d30:	200001d4 	.word	0x200001d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop

08005d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	607b      	str	r3, [r7, #4]
}
 8005d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d52:	f7fe ff19 	bl	8004b88 <xTaskIncrementTick>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d5c:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <SysTick_Handler+0x40>)
 8005d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	2300      	movs	r3, #0
 8005d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	f383 8811 	msr	BASEPRI, r3
}
 8005d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d70:	bf00      	nop
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <vPortSetupTimerInterrupt+0x34>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d86:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <vPortSetupTimerInterrupt+0x38>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d8c:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <vPortSetupTimerInterrupt+0x3c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <vPortSetupTimerInterrupt+0x40>)
 8005d92:	fba2 2303 	umull	r2, r3, r2, r3
 8005d96:	099b      	lsrs	r3, r3, #6
 8005d98:	4a09      	ldr	r2, [pc, #36]	; (8005dc0 <vPortSetupTimerInterrupt+0x44>)
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d9e:	4b04      	ldr	r3, [pc, #16]	; (8005db0 <vPortSetupTimerInterrupt+0x34>)
 8005da0:	2207      	movs	r2, #7
 8005da2:	601a      	str	r2, [r3, #0]
}
 8005da4:	bf00      	nop
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	e000e010 	.word	0xe000e010
 8005db4:	e000e018 	.word	0xe000e018
 8005db8:	20000000 	.word	0x20000000
 8005dbc:	10624dd3 	.word	0x10624dd3
 8005dc0:	e000e014 	.word	0xe000e014

08005dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005dd4 <vPortEnableVFP+0x10>
 8005dc8:	6801      	ldr	r1, [r0, #0]
 8005dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005dce:	6001      	str	r1, [r0, #0]
 8005dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005dd2:	bf00      	nop
 8005dd4:	e000ed88 	.word	0xe000ed88

08005dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005dde:	f3ef 8305 	mrs	r3, IPSR
 8005de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b0f      	cmp	r3, #15
 8005de8:	d914      	bls.n	8005e14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005dea:	4a17      	ldr	r2, [pc, #92]	; (8005e48 <vPortValidateInterruptPriority+0x70>)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005df4:	4b15      	ldr	r3, [pc, #84]	; (8005e4c <vPortValidateInterruptPriority+0x74>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	7afa      	ldrb	r2, [r7, #11]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d20a      	bcs.n	8005e14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	607b      	str	r3, [r7, #4]
}
 8005e10:	bf00      	nop
 8005e12:	e7fe      	b.n	8005e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e14:	4b0e      	ldr	r3, [pc, #56]	; (8005e50 <vPortValidateInterruptPriority+0x78>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e1c:	4b0d      	ldr	r3, [pc, #52]	; (8005e54 <vPortValidateInterruptPriority+0x7c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d90a      	bls.n	8005e3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	603b      	str	r3, [r7, #0]
}
 8005e36:	bf00      	nop
 8005e38:	e7fe      	b.n	8005e38 <vPortValidateInterruptPriority+0x60>
	}
 8005e3a:	bf00      	nop
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	e000e3f0 	.word	0xe000e3f0
 8005e4c:	20000314 	.word	0x20000314
 8005e50:	e000ed0c 	.word	0xe000ed0c
 8005e54:	20000318 	.word	0x20000318

08005e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08a      	sub	sp, #40	; 0x28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e64:	f7fe fdd6 	bl	8004a14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e68:	4b58      	ldr	r3, [pc, #352]	; (8005fcc <pvPortMalloc+0x174>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e70:	f000 f910 	bl	8006094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e74:	4b56      	ldr	r3, [pc, #344]	; (8005fd0 <pvPortMalloc+0x178>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f040 808e 	bne.w	8005f9e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01d      	beq.n	8005ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e88:	2208      	movs	r2, #8
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d014      	beq.n	8005ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f023 0307 	bic.w	r3, r3, #7
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	617b      	str	r3, [r7, #20]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d069      	beq.n	8005f9e <pvPortMalloc+0x146>
 8005eca:	4b42      	ldr	r3, [pc, #264]	; (8005fd4 <pvPortMalloc+0x17c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d864      	bhi.n	8005f9e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ed4:	4b40      	ldr	r3, [pc, #256]	; (8005fd8 <pvPortMalloc+0x180>)
 8005ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ed8:	4b3f      	ldr	r3, [pc, #252]	; (8005fd8 <pvPortMalloc+0x180>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ede:	e004      	b.n	8005eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d903      	bls.n	8005efc <pvPortMalloc+0xa4>
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f1      	bne.n	8005ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005efc:	4b33      	ldr	r3, [pc, #204]	; (8005fcc <pvPortMalloc+0x174>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d04b      	beq.n	8005f9e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	4413      	add	r3, r2
 8005f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	1ad2      	subs	r2, r2, r3
 8005f20:	2308      	movs	r3, #8
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d91f      	bls.n	8005f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <pvPortMalloc+0xf8>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	613b      	str	r3, [r7, #16]
}
 8005f4c:	bf00      	nop
 8005f4e:	e7fe      	b.n	8005f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	1ad2      	subs	r2, r2, r3
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f62:	69b8      	ldr	r0, [r7, #24]
 8005f64:	f000 f8f8 	bl	8006158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f68:	4b1a      	ldr	r3, [pc, #104]	; (8005fd4 <pvPortMalloc+0x17c>)
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	4a18      	ldr	r2, [pc, #96]	; (8005fd4 <pvPortMalloc+0x17c>)
 8005f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f76:	4b17      	ldr	r3, [pc, #92]	; (8005fd4 <pvPortMalloc+0x17c>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	4b18      	ldr	r3, [pc, #96]	; (8005fdc <pvPortMalloc+0x184>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d203      	bcs.n	8005f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f82:	4b14      	ldr	r3, [pc, #80]	; (8005fd4 <pvPortMalloc+0x17c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a15      	ldr	r2, [pc, #84]	; (8005fdc <pvPortMalloc+0x184>)
 8005f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <pvPortMalloc+0x178>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	431a      	orrs	r2, r3
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f9e:	f7fe fd47 	bl	8004a30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <pvPortMalloc+0x16a>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	60fb      	str	r3, [r7, #12]
}
 8005fbe:	bf00      	nop
 8005fc0:	e7fe      	b.n	8005fc0 <pvPortMalloc+0x168>
	return pvReturn;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3728      	adds	r7, #40	; 0x28
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20012f24 	.word	0x20012f24
 8005fd0:	20012f30 	.word	0x20012f30
 8005fd4:	20012f28 	.word	0x20012f28
 8005fd8:	20012f1c 	.word	0x20012f1c
 8005fdc:	20012f2c 	.word	0x20012f2c

08005fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d048      	beq.n	8006084 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ff2:	2308      	movs	r3, #8
 8005ff4:	425b      	negs	r3, r3
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	4b21      	ldr	r3, [pc, #132]	; (800608c <vPortFree+0xac>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4013      	ands	r3, r2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <vPortFree+0x44>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	60fb      	str	r3, [r7, #12]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <vPortFree+0x62>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	60bb      	str	r3, [r7, #8]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	4b11      	ldr	r3, [pc, #68]	; (800608c <vPortFree+0xac>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4013      	ands	r3, r2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d019      	beq.n	8006084 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d115      	bne.n	8006084 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	4b0b      	ldr	r3, [pc, #44]	; (800608c <vPortFree+0xac>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	43db      	mvns	r3, r3
 8006062:	401a      	ands	r2, r3
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006068:	f7fe fcd4 	bl	8004a14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	4b07      	ldr	r3, [pc, #28]	; (8006090 <vPortFree+0xb0>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4413      	add	r3, r2
 8006076:	4a06      	ldr	r2, [pc, #24]	; (8006090 <vPortFree+0xb0>)
 8006078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800607a:	6938      	ldr	r0, [r7, #16]
 800607c:	f000 f86c 	bl	8006158 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006080:	f7fe fcd6 	bl	8004a30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006084:	bf00      	nop
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20012f30 	.word	0x20012f30
 8006090:	20012f28 	.word	0x20012f28

08006094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800609a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800609e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060a0:	4b27      	ldr	r3, [pc, #156]	; (8006140 <prvHeapInit+0xac>)
 80060a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00c      	beq.n	80060c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3307      	adds	r3, #7
 80060b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0307 	bic.w	r3, r3, #7
 80060ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	4a1f      	ldr	r2, [pc, #124]	; (8006140 <prvHeapInit+0xac>)
 80060c4:	4413      	add	r3, r2
 80060c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060cc:	4a1d      	ldr	r2, [pc, #116]	; (8006144 <prvHeapInit+0xb0>)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060d2:	4b1c      	ldr	r3, [pc, #112]	; (8006144 <prvHeapInit+0xb0>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	4413      	add	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060e0:	2208      	movs	r2, #8
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0307 	bic.w	r3, r3, #7
 80060ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4a15      	ldr	r2, [pc, #84]	; (8006148 <prvHeapInit+0xb4>)
 80060f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060f6:	4b14      	ldr	r3, [pc, #80]	; (8006148 <prvHeapInit+0xb4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2200      	movs	r2, #0
 80060fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060fe:	4b12      	ldr	r3, [pc, #72]	; (8006148 <prvHeapInit+0xb4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	1ad2      	subs	r2, r2, r3
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006114:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <prvHeapInit+0xb4>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	4a0a      	ldr	r2, [pc, #40]	; (800614c <prvHeapInit+0xb8>)
 8006122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	4a09      	ldr	r2, [pc, #36]	; (8006150 <prvHeapInit+0xbc>)
 800612a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800612c:	4b09      	ldr	r3, [pc, #36]	; (8006154 <prvHeapInit+0xc0>)
 800612e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006132:	601a      	str	r2, [r3, #0]
}
 8006134:	bf00      	nop
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	2000031c 	.word	0x2000031c
 8006144:	20012f1c 	.word	0x20012f1c
 8006148:	20012f24 	.word	0x20012f24
 800614c:	20012f2c 	.word	0x20012f2c
 8006150:	20012f28 	.word	0x20012f28
 8006154:	20012f30 	.word	0x20012f30

08006158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006160:	4b28      	ldr	r3, [pc, #160]	; (8006204 <prvInsertBlockIntoFreeList+0xac>)
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	e002      	b.n	800616c <prvInsertBlockIntoFreeList+0x14>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	429a      	cmp	r2, r3
 8006174:	d8f7      	bhi.n	8006166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	4413      	add	r3, r2
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	429a      	cmp	r2, r3
 8006186:	d108      	bne.n	800619a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	441a      	add	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	441a      	add	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d118      	bne.n	80061e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b15      	ldr	r3, [pc, #84]	; (8006208 <prvInsertBlockIntoFreeList+0xb0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d00d      	beq.n	80061d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	441a      	add	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	e008      	b.n	80061e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061d6:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <prvInsertBlockIntoFreeList+0xb0>)
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	e003      	b.n	80061e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d002      	beq.n	80061f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061f6:	bf00      	nop
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	20012f1c 	.word	0x20012f1c
 8006208:	20012f24 	.word	0x20012f24

0800620c <__errno>:
 800620c:	4b01      	ldr	r3, [pc, #4]	; (8006214 <__errno+0x8>)
 800620e:	6818      	ldr	r0, [r3, #0]
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	20000010 	.word	0x20000010

08006218 <__libc_init_array>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	4d0d      	ldr	r5, [pc, #52]	; (8006250 <__libc_init_array+0x38>)
 800621c:	4c0d      	ldr	r4, [pc, #52]	; (8006254 <__libc_init_array+0x3c>)
 800621e:	1b64      	subs	r4, r4, r5
 8006220:	10a4      	asrs	r4, r4, #2
 8006222:	2600      	movs	r6, #0
 8006224:	42a6      	cmp	r6, r4
 8006226:	d109      	bne.n	800623c <__libc_init_array+0x24>
 8006228:	4d0b      	ldr	r5, [pc, #44]	; (8006258 <__libc_init_array+0x40>)
 800622a:	4c0c      	ldr	r4, [pc, #48]	; (800625c <__libc_init_array+0x44>)
 800622c:	f000 fc8e 	bl	8006b4c <_init>
 8006230:	1b64      	subs	r4, r4, r5
 8006232:	10a4      	asrs	r4, r4, #2
 8006234:	2600      	movs	r6, #0
 8006236:	42a6      	cmp	r6, r4
 8006238:	d105      	bne.n	8006246 <__libc_init_array+0x2e>
 800623a:	bd70      	pop	{r4, r5, r6, pc}
 800623c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006240:	4798      	blx	r3
 8006242:	3601      	adds	r6, #1
 8006244:	e7ee      	b.n	8006224 <__libc_init_array+0xc>
 8006246:	f855 3b04 	ldr.w	r3, [r5], #4
 800624a:	4798      	blx	r3
 800624c:	3601      	adds	r6, #1
 800624e:	e7f2      	b.n	8006236 <__libc_init_array+0x1e>
 8006250:	08006c4c 	.word	0x08006c4c
 8006254:	08006c4c 	.word	0x08006c4c
 8006258:	08006c4c 	.word	0x08006c4c
 800625c:	08006c50 	.word	0x08006c50

08006260 <memcpy>:
 8006260:	440a      	add	r2, r1
 8006262:	4291      	cmp	r1, r2
 8006264:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006268:	d100      	bne.n	800626c <memcpy+0xc>
 800626a:	4770      	bx	lr
 800626c:	b510      	push	{r4, lr}
 800626e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006272:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006276:	4291      	cmp	r1, r2
 8006278:	d1f9      	bne.n	800626e <memcpy+0xe>
 800627a:	bd10      	pop	{r4, pc}

0800627c <memset>:
 800627c:	4402      	add	r2, r0
 800627e:	4603      	mov	r3, r0
 8006280:	4293      	cmp	r3, r2
 8006282:	d100      	bne.n	8006286 <memset+0xa>
 8006284:	4770      	bx	lr
 8006286:	f803 1b01 	strb.w	r1, [r3], #1
 800628a:	e7f9      	b.n	8006280 <memset+0x4>

0800628c <siprintf>:
 800628c:	b40e      	push	{r1, r2, r3}
 800628e:	b500      	push	{lr}
 8006290:	b09c      	sub	sp, #112	; 0x70
 8006292:	ab1d      	add	r3, sp, #116	; 0x74
 8006294:	9002      	str	r0, [sp, #8]
 8006296:	9006      	str	r0, [sp, #24]
 8006298:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800629c:	4809      	ldr	r0, [pc, #36]	; (80062c4 <siprintf+0x38>)
 800629e:	9107      	str	r1, [sp, #28]
 80062a0:	9104      	str	r1, [sp, #16]
 80062a2:	4909      	ldr	r1, [pc, #36]	; (80062c8 <siprintf+0x3c>)
 80062a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80062a8:	9105      	str	r1, [sp, #20]
 80062aa:	6800      	ldr	r0, [r0, #0]
 80062ac:	9301      	str	r3, [sp, #4]
 80062ae:	a902      	add	r1, sp, #8
 80062b0:	f000 f868 	bl	8006384 <_svfiprintf_r>
 80062b4:	9b02      	ldr	r3, [sp, #8]
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	b01c      	add	sp, #112	; 0x70
 80062bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80062c0:	b003      	add	sp, #12
 80062c2:	4770      	bx	lr
 80062c4:	20000010 	.word	0x20000010
 80062c8:	ffff0208 	.word	0xffff0208

080062cc <__ssputs_r>:
 80062cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	688e      	ldr	r6, [r1, #8]
 80062d2:	429e      	cmp	r6, r3
 80062d4:	4682      	mov	sl, r0
 80062d6:	460c      	mov	r4, r1
 80062d8:	4690      	mov	r8, r2
 80062da:	461f      	mov	r7, r3
 80062dc:	d838      	bhi.n	8006350 <__ssputs_r+0x84>
 80062de:	898a      	ldrh	r2, [r1, #12]
 80062e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80062e4:	d032      	beq.n	800634c <__ssputs_r+0x80>
 80062e6:	6825      	ldr	r5, [r4, #0]
 80062e8:	6909      	ldr	r1, [r1, #16]
 80062ea:	eba5 0901 	sub.w	r9, r5, r1
 80062ee:	6965      	ldr	r5, [r4, #20]
 80062f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062f8:	3301      	adds	r3, #1
 80062fa:	444b      	add	r3, r9
 80062fc:	106d      	asrs	r5, r5, #1
 80062fe:	429d      	cmp	r5, r3
 8006300:	bf38      	it	cc
 8006302:	461d      	movcc	r5, r3
 8006304:	0553      	lsls	r3, r2, #21
 8006306:	d531      	bpl.n	800636c <__ssputs_r+0xa0>
 8006308:	4629      	mov	r1, r5
 800630a:	f000 fb55 	bl	80069b8 <_malloc_r>
 800630e:	4606      	mov	r6, r0
 8006310:	b950      	cbnz	r0, 8006328 <__ssputs_r+0x5c>
 8006312:	230c      	movs	r3, #12
 8006314:	f8ca 3000 	str.w	r3, [sl]
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006328:	6921      	ldr	r1, [r4, #16]
 800632a:	464a      	mov	r2, r9
 800632c:	f7ff ff98 	bl	8006260 <memcpy>
 8006330:	89a3      	ldrh	r3, [r4, #12]
 8006332:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633a:	81a3      	strh	r3, [r4, #12]
 800633c:	6126      	str	r6, [r4, #16]
 800633e:	6165      	str	r5, [r4, #20]
 8006340:	444e      	add	r6, r9
 8006342:	eba5 0509 	sub.w	r5, r5, r9
 8006346:	6026      	str	r6, [r4, #0]
 8006348:	60a5      	str	r5, [r4, #8]
 800634a:	463e      	mov	r6, r7
 800634c:	42be      	cmp	r6, r7
 800634e:	d900      	bls.n	8006352 <__ssputs_r+0x86>
 8006350:	463e      	mov	r6, r7
 8006352:	6820      	ldr	r0, [r4, #0]
 8006354:	4632      	mov	r2, r6
 8006356:	4641      	mov	r1, r8
 8006358:	f000 faa8 	bl	80068ac <memmove>
 800635c:	68a3      	ldr	r3, [r4, #8]
 800635e:	1b9b      	subs	r3, r3, r6
 8006360:	60a3      	str	r3, [r4, #8]
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	4433      	add	r3, r6
 8006366:	6023      	str	r3, [r4, #0]
 8006368:	2000      	movs	r0, #0
 800636a:	e7db      	b.n	8006324 <__ssputs_r+0x58>
 800636c:	462a      	mov	r2, r5
 800636e:	f000 fb97 	bl	8006aa0 <_realloc_r>
 8006372:	4606      	mov	r6, r0
 8006374:	2800      	cmp	r0, #0
 8006376:	d1e1      	bne.n	800633c <__ssputs_r+0x70>
 8006378:	6921      	ldr	r1, [r4, #16]
 800637a:	4650      	mov	r0, sl
 800637c:	f000 fab0 	bl	80068e0 <_free_r>
 8006380:	e7c7      	b.n	8006312 <__ssputs_r+0x46>
	...

08006384 <_svfiprintf_r>:
 8006384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006388:	4698      	mov	r8, r3
 800638a:	898b      	ldrh	r3, [r1, #12]
 800638c:	061b      	lsls	r3, r3, #24
 800638e:	b09d      	sub	sp, #116	; 0x74
 8006390:	4607      	mov	r7, r0
 8006392:	460d      	mov	r5, r1
 8006394:	4614      	mov	r4, r2
 8006396:	d50e      	bpl.n	80063b6 <_svfiprintf_r+0x32>
 8006398:	690b      	ldr	r3, [r1, #16]
 800639a:	b963      	cbnz	r3, 80063b6 <_svfiprintf_r+0x32>
 800639c:	2140      	movs	r1, #64	; 0x40
 800639e:	f000 fb0b 	bl	80069b8 <_malloc_r>
 80063a2:	6028      	str	r0, [r5, #0]
 80063a4:	6128      	str	r0, [r5, #16]
 80063a6:	b920      	cbnz	r0, 80063b2 <_svfiprintf_r+0x2e>
 80063a8:	230c      	movs	r3, #12
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063b0:	e0d1      	b.n	8006556 <_svfiprintf_r+0x1d2>
 80063b2:	2340      	movs	r3, #64	; 0x40
 80063b4:	616b      	str	r3, [r5, #20]
 80063b6:	2300      	movs	r3, #0
 80063b8:	9309      	str	r3, [sp, #36]	; 0x24
 80063ba:	2320      	movs	r3, #32
 80063bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80063c4:	2330      	movs	r3, #48	; 0x30
 80063c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006570 <_svfiprintf_r+0x1ec>
 80063ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063ce:	f04f 0901 	mov.w	r9, #1
 80063d2:	4623      	mov	r3, r4
 80063d4:	469a      	mov	sl, r3
 80063d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063da:	b10a      	cbz	r2, 80063e0 <_svfiprintf_r+0x5c>
 80063dc:	2a25      	cmp	r2, #37	; 0x25
 80063de:	d1f9      	bne.n	80063d4 <_svfiprintf_r+0x50>
 80063e0:	ebba 0b04 	subs.w	fp, sl, r4
 80063e4:	d00b      	beq.n	80063fe <_svfiprintf_r+0x7a>
 80063e6:	465b      	mov	r3, fp
 80063e8:	4622      	mov	r2, r4
 80063ea:	4629      	mov	r1, r5
 80063ec:	4638      	mov	r0, r7
 80063ee:	f7ff ff6d 	bl	80062cc <__ssputs_r>
 80063f2:	3001      	adds	r0, #1
 80063f4:	f000 80aa 	beq.w	800654c <_svfiprintf_r+0x1c8>
 80063f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063fa:	445a      	add	r2, fp
 80063fc:	9209      	str	r2, [sp, #36]	; 0x24
 80063fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 80a2 	beq.w	800654c <_svfiprintf_r+0x1c8>
 8006408:	2300      	movs	r3, #0
 800640a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800640e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006412:	f10a 0a01 	add.w	sl, sl, #1
 8006416:	9304      	str	r3, [sp, #16]
 8006418:	9307      	str	r3, [sp, #28]
 800641a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800641e:	931a      	str	r3, [sp, #104]	; 0x68
 8006420:	4654      	mov	r4, sl
 8006422:	2205      	movs	r2, #5
 8006424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006428:	4851      	ldr	r0, [pc, #324]	; (8006570 <_svfiprintf_r+0x1ec>)
 800642a:	f7f9 fed1 	bl	80001d0 <memchr>
 800642e:	9a04      	ldr	r2, [sp, #16]
 8006430:	b9d8      	cbnz	r0, 800646a <_svfiprintf_r+0xe6>
 8006432:	06d0      	lsls	r0, r2, #27
 8006434:	bf44      	itt	mi
 8006436:	2320      	movmi	r3, #32
 8006438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800643c:	0711      	lsls	r1, r2, #28
 800643e:	bf44      	itt	mi
 8006440:	232b      	movmi	r3, #43	; 0x2b
 8006442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006446:	f89a 3000 	ldrb.w	r3, [sl]
 800644a:	2b2a      	cmp	r3, #42	; 0x2a
 800644c:	d015      	beq.n	800647a <_svfiprintf_r+0xf6>
 800644e:	9a07      	ldr	r2, [sp, #28]
 8006450:	4654      	mov	r4, sl
 8006452:	2000      	movs	r0, #0
 8006454:	f04f 0c0a 	mov.w	ip, #10
 8006458:	4621      	mov	r1, r4
 800645a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800645e:	3b30      	subs	r3, #48	; 0x30
 8006460:	2b09      	cmp	r3, #9
 8006462:	d94e      	bls.n	8006502 <_svfiprintf_r+0x17e>
 8006464:	b1b0      	cbz	r0, 8006494 <_svfiprintf_r+0x110>
 8006466:	9207      	str	r2, [sp, #28]
 8006468:	e014      	b.n	8006494 <_svfiprintf_r+0x110>
 800646a:	eba0 0308 	sub.w	r3, r0, r8
 800646e:	fa09 f303 	lsl.w	r3, r9, r3
 8006472:	4313      	orrs	r3, r2
 8006474:	9304      	str	r3, [sp, #16]
 8006476:	46a2      	mov	sl, r4
 8006478:	e7d2      	b.n	8006420 <_svfiprintf_r+0x9c>
 800647a:	9b03      	ldr	r3, [sp, #12]
 800647c:	1d19      	adds	r1, r3, #4
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	9103      	str	r1, [sp, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	bfbb      	ittet	lt
 8006486:	425b      	neglt	r3, r3
 8006488:	f042 0202 	orrlt.w	r2, r2, #2
 800648c:	9307      	strge	r3, [sp, #28]
 800648e:	9307      	strlt	r3, [sp, #28]
 8006490:	bfb8      	it	lt
 8006492:	9204      	strlt	r2, [sp, #16]
 8006494:	7823      	ldrb	r3, [r4, #0]
 8006496:	2b2e      	cmp	r3, #46	; 0x2e
 8006498:	d10c      	bne.n	80064b4 <_svfiprintf_r+0x130>
 800649a:	7863      	ldrb	r3, [r4, #1]
 800649c:	2b2a      	cmp	r3, #42	; 0x2a
 800649e:	d135      	bne.n	800650c <_svfiprintf_r+0x188>
 80064a0:	9b03      	ldr	r3, [sp, #12]
 80064a2:	1d1a      	adds	r2, r3, #4
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	9203      	str	r2, [sp, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	bfb8      	it	lt
 80064ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80064b0:	3402      	adds	r4, #2
 80064b2:	9305      	str	r3, [sp, #20]
 80064b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006580 <_svfiprintf_r+0x1fc>
 80064b8:	7821      	ldrb	r1, [r4, #0]
 80064ba:	2203      	movs	r2, #3
 80064bc:	4650      	mov	r0, sl
 80064be:	f7f9 fe87 	bl	80001d0 <memchr>
 80064c2:	b140      	cbz	r0, 80064d6 <_svfiprintf_r+0x152>
 80064c4:	2340      	movs	r3, #64	; 0x40
 80064c6:	eba0 000a 	sub.w	r0, r0, sl
 80064ca:	fa03 f000 	lsl.w	r0, r3, r0
 80064ce:	9b04      	ldr	r3, [sp, #16]
 80064d0:	4303      	orrs	r3, r0
 80064d2:	3401      	adds	r4, #1
 80064d4:	9304      	str	r3, [sp, #16]
 80064d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064da:	4826      	ldr	r0, [pc, #152]	; (8006574 <_svfiprintf_r+0x1f0>)
 80064dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064e0:	2206      	movs	r2, #6
 80064e2:	f7f9 fe75 	bl	80001d0 <memchr>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d038      	beq.n	800655c <_svfiprintf_r+0x1d8>
 80064ea:	4b23      	ldr	r3, [pc, #140]	; (8006578 <_svfiprintf_r+0x1f4>)
 80064ec:	bb1b      	cbnz	r3, 8006536 <_svfiprintf_r+0x1b2>
 80064ee:	9b03      	ldr	r3, [sp, #12]
 80064f0:	3307      	adds	r3, #7
 80064f2:	f023 0307 	bic.w	r3, r3, #7
 80064f6:	3308      	adds	r3, #8
 80064f8:	9303      	str	r3, [sp, #12]
 80064fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fc:	4433      	add	r3, r6
 80064fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006500:	e767      	b.n	80063d2 <_svfiprintf_r+0x4e>
 8006502:	fb0c 3202 	mla	r2, ip, r2, r3
 8006506:	460c      	mov	r4, r1
 8006508:	2001      	movs	r0, #1
 800650a:	e7a5      	b.n	8006458 <_svfiprintf_r+0xd4>
 800650c:	2300      	movs	r3, #0
 800650e:	3401      	adds	r4, #1
 8006510:	9305      	str	r3, [sp, #20]
 8006512:	4619      	mov	r1, r3
 8006514:	f04f 0c0a 	mov.w	ip, #10
 8006518:	4620      	mov	r0, r4
 800651a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800651e:	3a30      	subs	r2, #48	; 0x30
 8006520:	2a09      	cmp	r2, #9
 8006522:	d903      	bls.n	800652c <_svfiprintf_r+0x1a8>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0c5      	beq.n	80064b4 <_svfiprintf_r+0x130>
 8006528:	9105      	str	r1, [sp, #20]
 800652a:	e7c3      	b.n	80064b4 <_svfiprintf_r+0x130>
 800652c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006530:	4604      	mov	r4, r0
 8006532:	2301      	movs	r3, #1
 8006534:	e7f0      	b.n	8006518 <_svfiprintf_r+0x194>
 8006536:	ab03      	add	r3, sp, #12
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	462a      	mov	r2, r5
 800653c:	4b0f      	ldr	r3, [pc, #60]	; (800657c <_svfiprintf_r+0x1f8>)
 800653e:	a904      	add	r1, sp, #16
 8006540:	4638      	mov	r0, r7
 8006542:	f3af 8000 	nop.w
 8006546:	1c42      	adds	r2, r0, #1
 8006548:	4606      	mov	r6, r0
 800654a:	d1d6      	bne.n	80064fa <_svfiprintf_r+0x176>
 800654c:	89ab      	ldrh	r3, [r5, #12]
 800654e:	065b      	lsls	r3, r3, #25
 8006550:	f53f af2c 	bmi.w	80063ac <_svfiprintf_r+0x28>
 8006554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006556:	b01d      	add	sp, #116	; 0x74
 8006558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800655c:	ab03      	add	r3, sp, #12
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	462a      	mov	r2, r5
 8006562:	4b06      	ldr	r3, [pc, #24]	; (800657c <_svfiprintf_r+0x1f8>)
 8006564:	a904      	add	r1, sp, #16
 8006566:	4638      	mov	r0, r7
 8006568:	f000 f87a 	bl	8006660 <_printf_i>
 800656c:	e7eb      	b.n	8006546 <_svfiprintf_r+0x1c2>
 800656e:	bf00      	nop
 8006570:	08006c10 	.word	0x08006c10
 8006574:	08006c1a 	.word	0x08006c1a
 8006578:	00000000 	.word	0x00000000
 800657c:	080062cd 	.word	0x080062cd
 8006580:	08006c16 	.word	0x08006c16

08006584 <_printf_common>:
 8006584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006588:	4616      	mov	r6, r2
 800658a:	4699      	mov	r9, r3
 800658c:	688a      	ldr	r2, [r1, #8]
 800658e:	690b      	ldr	r3, [r1, #16]
 8006590:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006594:	4293      	cmp	r3, r2
 8006596:	bfb8      	it	lt
 8006598:	4613      	movlt	r3, r2
 800659a:	6033      	str	r3, [r6, #0]
 800659c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065a0:	4607      	mov	r7, r0
 80065a2:	460c      	mov	r4, r1
 80065a4:	b10a      	cbz	r2, 80065aa <_printf_common+0x26>
 80065a6:	3301      	adds	r3, #1
 80065a8:	6033      	str	r3, [r6, #0]
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	0699      	lsls	r1, r3, #26
 80065ae:	bf42      	ittt	mi
 80065b0:	6833      	ldrmi	r3, [r6, #0]
 80065b2:	3302      	addmi	r3, #2
 80065b4:	6033      	strmi	r3, [r6, #0]
 80065b6:	6825      	ldr	r5, [r4, #0]
 80065b8:	f015 0506 	ands.w	r5, r5, #6
 80065bc:	d106      	bne.n	80065cc <_printf_common+0x48>
 80065be:	f104 0a19 	add.w	sl, r4, #25
 80065c2:	68e3      	ldr	r3, [r4, #12]
 80065c4:	6832      	ldr	r2, [r6, #0]
 80065c6:	1a9b      	subs	r3, r3, r2
 80065c8:	42ab      	cmp	r3, r5
 80065ca:	dc26      	bgt.n	800661a <_printf_common+0x96>
 80065cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065d0:	1e13      	subs	r3, r2, #0
 80065d2:	6822      	ldr	r2, [r4, #0]
 80065d4:	bf18      	it	ne
 80065d6:	2301      	movne	r3, #1
 80065d8:	0692      	lsls	r2, r2, #26
 80065da:	d42b      	bmi.n	8006634 <_printf_common+0xb0>
 80065dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065e0:	4649      	mov	r1, r9
 80065e2:	4638      	mov	r0, r7
 80065e4:	47c0      	blx	r8
 80065e6:	3001      	adds	r0, #1
 80065e8:	d01e      	beq.n	8006628 <_printf_common+0xa4>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	68e5      	ldr	r5, [r4, #12]
 80065ee:	6832      	ldr	r2, [r6, #0]
 80065f0:	f003 0306 	and.w	r3, r3, #6
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	bf08      	it	eq
 80065f8:	1aad      	subeq	r5, r5, r2
 80065fa:	68a3      	ldr	r3, [r4, #8]
 80065fc:	6922      	ldr	r2, [r4, #16]
 80065fe:	bf0c      	ite	eq
 8006600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006604:	2500      	movne	r5, #0
 8006606:	4293      	cmp	r3, r2
 8006608:	bfc4      	itt	gt
 800660a:	1a9b      	subgt	r3, r3, r2
 800660c:	18ed      	addgt	r5, r5, r3
 800660e:	2600      	movs	r6, #0
 8006610:	341a      	adds	r4, #26
 8006612:	42b5      	cmp	r5, r6
 8006614:	d11a      	bne.n	800664c <_printf_common+0xc8>
 8006616:	2000      	movs	r0, #0
 8006618:	e008      	b.n	800662c <_printf_common+0xa8>
 800661a:	2301      	movs	r3, #1
 800661c:	4652      	mov	r2, sl
 800661e:	4649      	mov	r1, r9
 8006620:	4638      	mov	r0, r7
 8006622:	47c0      	blx	r8
 8006624:	3001      	adds	r0, #1
 8006626:	d103      	bne.n	8006630 <_printf_common+0xac>
 8006628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800662c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006630:	3501      	adds	r5, #1
 8006632:	e7c6      	b.n	80065c2 <_printf_common+0x3e>
 8006634:	18e1      	adds	r1, r4, r3
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	2030      	movs	r0, #48	; 0x30
 800663a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800663e:	4422      	add	r2, r4
 8006640:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006644:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006648:	3302      	adds	r3, #2
 800664a:	e7c7      	b.n	80065dc <_printf_common+0x58>
 800664c:	2301      	movs	r3, #1
 800664e:	4622      	mov	r2, r4
 8006650:	4649      	mov	r1, r9
 8006652:	4638      	mov	r0, r7
 8006654:	47c0      	blx	r8
 8006656:	3001      	adds	r0, #1
 8006658:	d0e6      	beq.n	8006628 <_printf_common+0xa4>
 800665a:	3601      	adds	r6, #1
 800665c:	e7d9      	b.n	8006612 <_printf_common+0x8e>
	...

08006660 <_printf_i>:
 8006660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006664:	7e0f      	ldrb	r7, [r1, #24]
 8006666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006668:	2f78      	cmp	r7, #120	; 0x78
 800666a:	4691      	mov	r9, r2
 800666c:	4680      	mov	r8, r0
 800666e:	460c      	mov	r4, r1
 8006670:	469a      	mov	sl, r3
 8006672:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006676:	d807      	bhi.n	8006688 <_printf_i+0x28>
 8006678:	2f62      	cmp	r7, #98	; 0x62
 800667a:	d80a      	bhi.n	8006692 <_printf_i+0x32>
 800667c:	2f00      	cmp	r7, #0
 800667e:	f000 80d8 	beq.w	8006832 <_printf_i+0x1d2>
 8006682:	2f58      	cmp	r7, #88	; 0x58
 8006684:	f000 80a3 	beq.w	80067ce <_printf_i+0x16e>
 8006688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800668c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006690:	e03a      	b.n	8006708 <_printf_i+0xa8>
 8006692:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006696:	2b15      	cmp	r3, #21
 8006698:	d8f6      	bhi.n	8006688 <_printf_i+0x28>
 800669a:	a101      	add	r1, pc, #4	; (adr r1, 80066a0 <_printf_i+0x40>)
 800669c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066a0:	080066f9 	.word	0x080066f9
 80066a4:	0800670d 	.word	0x0800670d
 80066a8:	08006689 	.word	0x08006689
 80066ac:	08006689 	.word	0x08006689
 80066b0:	08006689 	.word	0x08006689
 80066b4:	08006689 	.word	0x08006689
 80066b8:	0800670d 	.word	0x0800670d
 80066bc:	08006689 	.word	0x08006689
 80066c0:	08006689 	.word	0x08006689
 80066c4:	08006689 	.word	0x08006689
 80066c8:	08006689 	.word	0x08006689
 80066cc:	08006819 	.word	0x08006819
 80066d0:	0800673d 	.word	0x0800673d
 80066d4:	080067fb 	.word	0x080067fb
 80066d8:	08006689 	.word	0x08006689
 80066dc:	08006689 	.word	0x08006689
 80066e0:	0800683b 	.word	0x0800683b
 80066e4:	08006689 	.word	0x08006689
 80066e8:	0800673d 	.word	0x0800673d
 80066ec:	08006689 	.word	0x08006689
 80066f0:	08006689 	.word	0x08006689
 80066f4:	08006803 	.word	0x08006803
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	1d1a      	adds	r2, r3, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	602a      	str	r2, [r5, #0]
 8006700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006708:	2301      	movs	r3, #1
 800670a:	e0a3      	b.n	8006854 <_printf_i+0x1f4>
 800670c:	6820      	ldr	r0, [r4, #0]
 800670e:	6829      	ldr	r1, [r5, #0]
 8006710:	0606      	lsls	r6, r0, #24
 8006712:	f101 0304 	add.w	r3, r1, #4
 8006716:	d50a      	bpl.n	800672e <_printf_i+0xce>
 8006718:	680e      	ldr	r6, [r1, #0]
 800671a:	602b      	str	r3, [r5, #0]
 800671c:	2e00      	cmp	r6, #0
 800671e:	da03      	bge.n	8006728 <_printf_i+0xc8>
 8006720:	232d      	movs	r3, #45	; 0x2d
 8006722:	4276      	negs	r6, r6
 8006724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006728:	485e      	ldr	r0, [pc, #376]	; (80068a4 <_printf_i+0x244>)
 800672a:	230a      	movs	r3, #10
 800672c:	e019      	b.n	8006762 <_printf_i+0x102>
 800672e:	680e      	ldr	r6, [r1, #0]
 8006730:	602b      	str	r3, [r5, #0]
 8006732:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006736:	bf18      	it	ne
 8006738:	b236      	sxthne	r6, r6
 800673a:	e7ef      	b.n	800671c <_printf_i+0xbc>
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	6820      	ldr	r0, [r4, #0]
 8006740:	1d19      	adds	r1, r3, #4
 8006742:	6029      	str	r1, [r5, #0]
 8006744:	0601      	lsls	r1, r0, #24
 8006746:	d501      	bpl.n	800674c <_printf_i+0xec>
 8006748:	681e      	ldr	r6, [r3, #0]
 800674a:	e002      	b.n	8006752 <_printf_i+0xf2>
 800674c:	0646      	lsls	r6, r0, #25
 800674e:	d5fb      	bpl.n	8006748 <_printf_i+0xe8>
 8006750:	881e      	ldrh	r6, [r3, #0]
 8006752:	4854      	ldr	r0, [pc, #336]	; (80068a4 <_printf_i+0x244>)
 8006754:	2f6f      	cmp	r7, #111	; 0x6f
 8006756:	bf0c      	ite	eq
 8006758:	2308      	moveq	r3, #8
 800675a:	230a      	movne	r3, #10
 800675c:	2100      	movs	r1, #0
 800675e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006762:	6865      	ldr	r5, [r4, #4]
 8006764:	60a5      	str	r5, [r4, #8]
 8006766:	2d00      	cmp	r5, #0
 8006768:	bfa2      	ittt	ge
 800676a:	6821      	ldrge	r1, [r4, #0]
 800676c:	f021 0104 	bicge.w	r1, r1, #4
 8006770:	6021      	strge	r1, [r4, #0]
 8006772:	b90e      	cbnz	r6, 8006778 <_printf_i+0x118>
 8006774:	2d00      	cmp	r5, #0
 8006776:	d04d      	beq.n	8006814 <_printf_i+0x1b4>
 8006778:	4615      	mov	r5, r2
 800677a:	fbb6 f1f3 	udiv	r1, r6, r3
 800677e:	fb03 6711 	mls	r7, r3, r1, r6
 8006782:	5dc7      	ldrb	r7, [r0, r7]
 8006784:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006788:	4637      	mov	r7, r6
 800678a:	42bb      	cmp	r3, r7
 800678c:	460e      	mov	r6, r1
 800678e:	d9f4      	bls.n	800677a <_printf_i+0x11a>
 8006790:	2b08      	cmp	r3, #8
 8006792:	d10b      	bne.n	80067ac <_printf_i+0x14c>
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	07de      	lsls	r6, r3, #31
 8006798:	d508      	bpl.n	80067ac <_printf_i+0x14c>
 800679a:	6923      	ldr	r3, [r4, #16]
 800679c:	6861      	ldr	r1, [r4, #4]
 800679e:	4299      	cmp	r1, r3
 80067a0:	bfde      	ittt	le
 80067a2:	2330      	movle	r3, #48	; 0x30
 80067a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067a8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80067ac:	1b52      	subs	r2, r2, r5
 80067ae:	6122      	str	r2, [r4, #16]
 80067b0:	f8cd a000 	str.w	sl, [sp]
 80067b4:	464b      	mov	r3, r9
 80067b6:	aa03      	add	r2, sp, #12
 80067b8:	4621      	mov	r1, r4
 80067ba:	4640      	mov	r0, r8
 80067bc:	f7ff fee2 	bl	8006584 <_printf_common>
 80067c0:	3001      	adds	r0, #1
 80067c2:	d14c      	bne.n	800685e <_printf_i+0x1fe>
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067c8:	b004      	add	sp, #16
 80067ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ce:	4835      	ldr	r0, [pc, #212]	; (80068a4 <_printf_i+0x244>)
 80067d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067d4:	6829      	ldr	r1, [r5, #0]
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80067dc:	6029      	str	r1, [r5, #0]
 80067de:	061d      	lsls	r5, r3, #24
 80067e0:	d514      	bpl.n	800680c <_printf_i+0x1ac>
 80067e2:	07df      	lsls	r7, r3, #31
 80067e4:	bf44      	itt	mi
 80067e6:	f043 0320 	orrmi.w	r3, r3, #32
 80067ea:	6023      	strmi	r3, [r4, #0]
 80067ec:	b91e      	cbnz	r6, 80067f6 <_printf_i+0x196>
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	f023 0320 	bic.w	r3, r3, #32
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	2310      	movs	r3, #16
 80067f8:	e7b0      	b.n	800675c <_printf_i+0xfc>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	f043 0320 	orr.w	r3, r3, #32
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	2378      	movs	r3, #120	; 0x78
 8006804:	4828      	ldr	r0, [pc, #160]	; (80068a8 <_printf_i+0x248>)
 8006806:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800680a:	e7e3      	b.n	80067d4 <_printf_i+0x174>
 800680c:	0659      	lsls	r1, r3, #25
 800680e:	bf48      	it	mi
 8006810:	b2b6      	uxthmi	r6, r6
 8006812:	e7e6      	b.n	80067e2 <_printf_i+0x182>
 8006814:	4615      	mov	r5, r2
 8006816:	e7bb      	b.n	8006790 <_printf_i+0x130>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	6826      	ldr	r6, [r4, #0]
 800681c:	6961      	ldr	r1, [r4, #20]
 800681e:	1d18      	adds	r0, r3, #4
 8006820:	6028      	str	r0, [r5, #0]
 8006822:	0635      	lsls	r5, r6, #24
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	d501      	bpl.n	800682c <_printf_i+0x1cc>
 8006828:	6019      	str	r1, [r3, #0]
 800682a:	e002      	b.n	8006832 <_printf_i+0x1d2>
 800682c:	0670      	lsls	r0, r6, #25
 800682e:	d5fb      	bpl.n	8006828 <_printf_i+0x1c8>
 8006830:	8019      	strh	r1, [r3, #0]
 8006832:	2300      	movs	r3, #0
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	4615      	mov	r5, r2
 8006838:	e7ba      	b.n	80067b0 <_printf_i+0x150>
 800683a:	682b      	ldr	r3, [r5, #0]
 800683c:	1d1a      	adds	r2, r3, #4
 800683e:	602a      	str	r2, [r5, #0]
 8006840:	681d      	ldr	r5, [r3, #0]
 8006842:	6862      	ldr	r2, [r4, #4]
 8006844:	2100      	movs	r1, #0
 8006846:	4628      	mov	r0, r5
 8006848:	f7f9 fcc2 	bl	80001d0 <memchr>
 800684c:	b108      	cbz	r0, 8006852 <_printf_i+0x1f2>
 800684e:	1b40      	subs	r0, r0, r5
 8006850:	6060      	str	r0, [r4, #4]
 8006852:	6863      	ldr	r3, [r4, #4]
 8006854:	6123      	str	r3, [r4, #16]
 8006856:	2300      	movs	r3, #0
 8006858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800685c:	e7a8      	b.n	80067b0 <_printf_i+0x150>
 800685e:	6923      	ldr	r3, [r4, #16]
 8006860:	462a      	mov	r2, r5
 8006862:	4649      	mov	r1, r9
 8006864:	4640      	mov	r0, r8
 8006866:	47d0      	blx	sl
 8006868:	3001      	adds	r0, #1
 800686a:	d0ab      	beq.n	80067c4 <_printf_i+0x164>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	079b      	lsls	r3, r3, #30
 8006870:	d413      	bmi.n	800689a <_printf_i+0x23a>
 8006872:	68e0      	ldr	r0, [r4, #12]
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	4298      	cmp	r0, r3
 8006878:	bfb8      	it	lt
 800687a:	4618      	movlt	r0, r3
 800687c:	e7a4      	b.n	80067c8 <_printf_i+0x168>
 800687e:	2301      	movs	r3, #1
 8006880:	4632      	mov	r2, r6
 8006882:	4649      	mov	r1, r9
 8006884:	4640      	mov	r0, r8
 8006886:	47d0      	blx	sl
 8006888:	3001      	adds	r0, #1
 800688a:	d09b      	beq.n	80067c4 <_printf_i+0x164>
 800688c:	3501      	adds	r5, #1
 800688e:	68e3      	ldr	r3, [r4, #12]
 8006890:	9903      	ldr	r1, [sp, #12]
 8006892:	1a5b      	subs	r3, r3, r1
 8006894:	42ab      	cmp	r3, r5
 8006896:	dcf2      	bgt.n	800687e <_printf_i+0x21e>
 8006898:	e7eb      	b.n	8006872 <_printf_i+0x212>
 800689a:	2500      	movs	r5, #0
 800689c:	f104 0619 	add.w	r6, r4, #25
 80068a0:	e7f5      	b.n	800688e <_printf_i+0x22e>
 80068a2:	bf00      	nop
 80068a4:	08006c21 	.word	0x08006c21
 80068a8:	08006c32 	.word	0x08006c32

080068ac <memmove>:
 80068ac:	4288      	cmp	r0, r1
 80068ae:	b510      	push	{r4, lr}
 80068b0:	eb01 0402 	add.w	r4, r1, r2
 80068b4:	d902      	bls.n	80068bc <memmove+0x10>
 80068b6:	4284      	cmp	r4, r0
 80068b8:	4623      	mov	r3, r4
 80068ba:	d807      	bhi.n	80068cc <memmove+0x20>
 80068bc:	1e43      	subs	r3, r0, #1
 80068be:	42a1      	cmp	r1, r4
 80068c0:	d008      	beq.n	80068d4 <memmove+0x28>
 80068c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068ca:	e7f8      	b.n	80068be <memmove+0x12>
 80068cc:	4402      	add	r2, r0
 80068ce:	4601      	mov	r1, r0
 80068d0:	428a      	cmp	r2, r1
 80068d2:	d100      	bne.n	80068d6 <memmove+0x2a>
 80068d4:	bd10      	pop	{r4, pc}
 80068d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068de:	e7f7      	b.n	80068d0 <memmove+0x24>

080068e0 <_free_r>:
 80068e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068e2:	2900      	cmp	r1, #0
 80068e4:	d044      	beq.n	8006970 <_free_r+0x90>
 80068e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ea:	9001      	str	r0, [sp, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f1a1 0404 	sub.w	r4, r1, #4
 80068f2:	bfb8      	it	lt
 80068f4:	18e4      	addlt	r4, r4, r3
 80068f6:	f000 f913 	bl	8006b20 <__malloc_lock>
 80068fa:	4a1e      	ldr	r2, [pc, #120]	; (8006974 <_free_r+0x94>)
 80068fc:	9801      	ldr	r0, [sp, #4]
 80068fe:	6813      	ldr	r3, [r2, #0]
 8006900:	b933      	cbnz	r3, 8006910 <_free_r+0x30>
 8006902:	6063      	str	r3, [r4, #4]
 8006904:	6014      	str	r4, [r2, #0]
 8006906:	b003      	add	sp, #12
 8006908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800690c:	f000 b90e 	b.w	8006b2c <__malloc_unlock>
 8006910:	42a3      	cmp	r3, r4
 8006912:	d908      	bls.n	8006926 <_free_r+0x46>
 8006914:	6825      	ldr	r5, [r4, #0]
 8006916:	1961      	adds	r1, r4, r5
 8006918:	428b      	cmp	r3, r1
 800691a:	bf01      	itttt	eq
 800691c:	6819      	ldreq	r1, [r3, #0]
 800691e:	685b      	ldreq	r3, [r3, #4]
 8006920:	1949      	addeq	r1, r1, r5
 8006922:	6021      	streq	r1, [r4, #0]
 8006924:	e7ed      	b.n	8006902 <_free_r+0x22>
 8006926:	461a      	mov	r2, r3
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	b10b      	cbz	r3, 8006930 <_free_r+0x50>
 800692c:	42a3      	cmp	r3, r4
 800692e:	d9fa      	bls.n	8006926 <_free_r+0x46>
 8006930:	6811      	ldr	r1, [r2, #0]
 8006932:	1855      	adds	r5, r2, r1
 8006934:	42a5      	cmp	r5, r4
 8006936:	d10b      	bne.n	8006950 <_free_r+0x70>
 8006938:	6824      	ldr	r4, [r4, #0]
 800693a:	4421      	add	r1, r4
 800693c:	1854      	adds	r4, r2, r1
 800693e:	42a3      	cmp	r3, r4
 8006940:	6011      	str	r1, [r2, #0]
 8006942:	d1e0      	bne.n	8006906 <_free_r+0x26>
 8006944:	681c      	ldr	r4, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	6053      	str	r3, [r2, #4]
 800694a:	4421      	add	r1, r4
 800694c:	6011      	str	r1, [r2, #0]
 800694e:	e7da      	b.n	8006906 <_free_r+0x26>
 8006950:	d902      	bls.n	8006958 <_free_r+0x78>
 8006952:	230c      	movs	r3, #12
 8006954:	6003      	str	r3, [r0, #0]
 8006956:	e7d6      	b.n	8006906 <_free_r+0x26>
 8006958:	6825      	ldr	r5, [r4, #0]
 800695a:	1961      	adds	r1, r4, r5
 800695c:	428b      	cmp	r3, r1
 800695e:	bf04      	itt	eq
 8006960:	6819      	ldreq	r1, [r3, #0]
 8006962:	685b      	ldreq	r3, [r3, #4]
 8006964:	6063      	str	r3, [r4, #4]
 8006966:	bf04      	itt	eq
 8006968:	1949      	addeq	r1, r1, r5
 800696a:	6021      	streq	r1, [r4, #0]
 800696c:	6054      	str	r4, [r2, #4]
 800696e:	e7ca      	b.n	8006906 <_free_r+0x26>
 8006970:	b003      	add	sp, #12
 8006972:	bd30      	pop	{r4, r5, pc}
 8006974:	20012f34 	.word	0x20012f34

08006978 <sbrk_aligned>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	4e0e      	ldr	r6, [pc, #56]	; (80069b4 <sbrk_aligned+0x3c>)
 800697c:	460c      	mov	r4, r1
 800697e:	6831      	ldr	r1, [r6, #0]
 8006980:	4605      	mov	r5, r0
 8006982:	b911      	cbnz	r1, 800698a <sbrk_aligned+0x12>
 8006984:	f000 f8bc 	bl	8006b00 <_sbrk_r>
 8006988:	6030      	str	r0, [r6, #0]
 800698a:	4621      	mov	r1, r4
 800698c:	4628      	mov	r0, r5
 800698e:	f000 f8b7 	bl	8006b00 <_sbrk_r>
 8006992:	1c43      	adds	r3, r0, #1
 8006994:	d00a      	beq.n	80069ac <sbrk_aligned+0x34>
 8006996:	1cc4      	adds	r4, r0, #3
 8006998:	f024 0403 	bic.w	r4, r4, #3
 800699c:	42a0      	cmp	r0, r4
 800699e:	d007      	beq.n	80069b0 <sbrk_aligned+0x38>
 80069a0:	1a21      	subs	r1, r4, r0
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 f8ac 	bl	8006b00 <_sbrk_r>
 80069a8:	3001      	adds	r0, #1
 80069aa:	d101      	bne.n	80069b0 <sbrk_aligned+0x38>
 80069ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80069b0:	4620      	mov	r0, r4
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
 80069b4:	20012f38 	.word	0x20012f38

080069b8 <_malloc_r>:
 80069b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069bc:	1ccd      	adds	r5, r1, #3
 80069be:	f025 0503 	bic.w	r5, r5, #3
 80069c2:	3508      	adds	r5, #8
 80069c4:	2d0c      	cmp	r5, #12
 80069c6:	bf38      	it	cc
 80069c8:	250c      	movcc	r5, #12
 80069ca:	2d00      	cmp	r5, #0
 80069cc:	4607      	mov	r7, r0
 80069ce:	db01      	blt.n	80069d4 <_malloc_r+0x1c>
 80069d0:	42a9      	cmp	r1, r5
 80069d2:	d905      	bls.n	80069e0 <_malloc_r+0x28>
 80069d4:	230c      	movs	r3, #12
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	2600      	movs	r6, #0
 80069da:	4630      	mov	r0, r6
 80069dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e0:	4e2e      	ldr	r6, [pc, #184]	; (8006a9c <_malloc_r+0xe4>)
 80069e2:	f000 f89d 	bl	8006b20 <__malloc_lock>
 80069e6:	6833      	ldr	r3, [r6, #0]
 80069e8:	461c      	mov	r4, r3
 80069ea:	bb34      	cbnz	r4, 8006a3a <_malloc_r+0x82>
 80069ec:	4629      	mov	r1, r5
 80069ee:	4638      	mov	r0, r7
 80069f0:	f7ff ffc2 	bl	8006978 <sbrk_aligned>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	4604      	mov	r4, r0
 80069f8:	d14d      	bne.n	8006a96 <_malloc_r+0xde>
 80069fa:	6834      	ldr	r4, [r6, #0]
 80069fc:	4626      	mov	r6, r4
 80069fe:	2e00      	cmp	r6, #0
 8006a00:	d140      	bne.n	8006a84 <_malloc_r+0xcc>
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	4631      	mov	r1, r6
 8006a06:	4638      	mov	r0, r7
 8006a08:	eb04 0803 	add.w	r8, r4, r3
 8006a0c:	f000 f878 	bl	8006b00 <_sbrk_r>
 8006a10:	4580      	cmp	r8, r0
 8006a12:	d13a      	bne.n	8006a8a <_malloc_r+0xd2>
 8006a14:	6821      	ldr	r1, [r4, #0]
 8006a16:	3503      	adds	r5, #3
 8006a18:	1a6d      	subs	r5, r5, r1
 8006a1a:	f025 0503 	bic.w	r5, r5, #3
 8006a1e:	3508      	adds	r5, #8
 8006a20:	2d0c      	cmp	r5, #12
 8006a22:	bf38      	it	cc
 8006a24:	250c      	movcc	r5, #12
 8006a26:	4629      	mov	r1, r5
 8006a28:	4638      	mov	r0, r7
 8006a2a:	f7ff ffa5 	bl	8006978 <sbrk_aligned>
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d02b      	beq.n	8006a8a <_malloc_r+0xd2>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	442b      	add	r3, r5
 8006a36:	6023      	str	r3, [r4, #0]
 8006a38:	e00e      	b.n	8006a58 <_malloc_r+0xa0>
 8006a3a:	6822      	ldr	r2, [r4, #0]
 8006a3c:	1b52      	subs	r2, r2, r5
 8006a3e:	d41e      	bmi.n	8006a7e <_malloc_r+0xc6>
 8006a40:	2a0b      	cmp	r2, #11
 8006a42:	d916      	bls.n	8006a72 <_malloc_r+0xba>
 8006a44:	1961      	adds	r1, r4, r5
 8006a46:	42a3      	cmp	r3, r4
 8006a48:	6025      	str	r5, [r4, #0]
 8006a4a:	bf18      	it	ne
 8006a4c:	6059      	strne	r1, [r3, #4]
 8006a4e:	6863      	ldr	r3, [r4, #4]
 8006a50:	bf08      	it	eq
 8006a52:	6031      	streq	r1, [r6, #0]
 8006a54:	5162      	str	r2, [r4, r5]
 8006a56:	604b      	str	r3, [r1, #4]
 8006a58:	4638      	mov	r0, r7
 8006a5a:	f104 060b 	add.w	r6, r4, #11
 8006a5e:	f000 f865 	bl	8006b2c <__malloc_unlock>
 8006a62:	f026 0607 	bic.w	r6, r6, #7
 8006a66:	1d23      	adds	r3, r4, #4
 8006a68:	1af2      	subs	r2, r6, r3
 8006a6a:	d0b6      	beq.n	80069da <_malloc_r+0x22>
 8006a6c:	1b9b      	subs	r3, r3, r6
 8006a6e:	50a3      	str	r3, [r4, r2]
 8006a70:	e7b3      	b.n	80069da <_malloc_r+0x22>
 8006a72:	6862      	ldr	r2, [r4, #4]
 8006a74:	42a3      	cmp	r3, r4
 8006a76:	bf0c      	ite	eq
 8006a78:	6032      	streq	r2, [r6, #0]
 8006a7a:	605a      	strne	r2, [r3, #4]
 8006a7c:	e7ec      	b.n	8006a58 <_malloc_r+0xa0>
 8006a7e:	4623      	mov	r3, r4
 8006a80:	6864      	ldr	r4, [r4, #4]
 8006a82:	e7b2      	b.n	80069ea <_malloc_r+0x32>
 8006a84:	4634      	mov	r4, r6
 8006a86:	6876      	ldr	r6, [r6, #4]
 8006a88:	e7b9      	b.n	80069fe <_malloc_r+0x46>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	603b      	str	r3, [r7, #0]
 8006a8e:	4638      	mov	r0, r7
 8006a90:	f000 f84c 	bl	8006b2c <__malloc_unlock>
 8006a94:	e7a1      	b.n	80069da <_malloc_r+0x22>
 8006a96:	6025      	str	r5, [r4, #0]
 8006a98:	e7de      	b.n	8006a58 <_malloc_r+0xa0>
 8006a9a:	bf00      	nop
 8006a9c:	20012f34 	.word	0x20012f34

08006aa0 <_realloc_r>:
 8006aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa4:	4680      	mov	r8, r0
 8006aa6:	4614      	mov	r4, r2
 8006aa8:	460e      	mov	r6, r1
 8006aaa:	b921      	cbnz	r1, 8006ab6 <_realloc_r+0x16>
 8006aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	f7ff bf81 	b.w	80069b8 <_malloc_r>
 8006ab6:	b92a      	cbnz	r2, 8006ac4 <_realloc_r+0x24>
 8006ab8:	f7ff ff12 	bl	80068e0 <_free_r>
 8006abc:	4625      	mov	r5, r4
 8006abe:	4628      	mov	r0, r5
 8006ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ac4:	f000 f838 	bl	8006b38 <_malloc_usable_size_r>
 8006ac8:	4284      	cmp	r4, r0
 8006aca:	4607      	mov	r7, r0
 8006acc:	d802      	bhi.n	8006ad4 <_realloc_r+0x34>
 8006ace:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ad2:	d812      	bhi.n	8006afa <_realloc_r+0x5a>
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	f7ff ff6e 	bl	80069b8 <_malloc_r>
 8006adc:	4605      	mov	r5, r0
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d0ed      	beq.n	8006abe <_realloc_r+0x1e>
 8006ae2:	42bc      	cmp	r4, r7
 8006ae4:	4622      	mov	r2, r4
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	bf28      	it	cs
 8006aea:	463a      	movcs	r2, r7
 8006aec:	f7ff fbb8 	bl	8006260 <memcpy>
 8006af0:	4631      	mov	r1, r6
 8006af2:	4640      	mov	r0, r8
 8006af4:	f7ff fef4 	bl	80068e0 <_free_r>
 8006af8:	e7e1      	b.n	8006abe <_realloc_r+0x1e>
 8006afa:	4635      	mov	r5, r6
 8006afc:	e7df      	b.n	8006abe <_realloc_r+0x1e>
	...

08006b00 <_sbrk_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	4d06      	ldr	r5, [pc, #24]	; (8006b1c <_sbrk_r+0x1c>)
 8006b04:	2300      	movs	r3, #0
 8006b06:	4604      	mov	r4, r0
 8006b08:	4608      	mov	r0, r1
 8006b0a:	602b      	str	r3, [r5, #0]
 8006b0c:	f7fa fc4e 	bl	80013ac <_sbrk>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d102      	bne.n	8006b1a <_sbrk_r+0x1a>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	b103      	cbz	r3, 8006b1a <_sbrk_r+0x1a>
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	20012f3c 	.word	0x20012f3c

08006b20 <__malloc_lock>:
 8006b20:	4801      	ldr	r0, [pc, #4]	; (8006b28 <__malloc_lock+0x8>)
 8006b22:	f000 b811 	b.w	8006b48 <__retarget_lock_acquire_recursive>
 8006b26:	bf00      	nop
 8006b28:	20012f40 	.word	0x20012f40

08006b2c <__malloc_unlock>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	; (8006b34 <__malloc_unlock+0x8>)
 8006b2e:	f000 b80c 	b.w	8006b4a <__retarget_lock_release_recursive>
 8006b32:	bf00      	nop
 8006b34:	20012f40 	.word	0x20012f40

08006b38 <_malloc_usable_size_r>:
 8006b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b3c:	1f18      	subs	r0, r3, #4
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	bfbc      	itt	lt
 8006b42:	580b      	ldrlt	r3, [r1, r0]
 8006b44:	18c0      	addlt	r0, r0, r3
 8006b46:	4770      	bx	lr

08006b48 <__retarget_lock_acquire_recursive>:
 8006b48:	4770      	bx	lr

08006b4a <__retarget_lock_release_recursive>:
 8006b4a:	4770      	bx	lr

08006b4c <_init>:
 8006b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4e:	bf00      	nop
 8006b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b52:	bc08      	pop	{r3}
 8006b54:	469e      	mov	lr, r3
 8006b56:	4770      	bx	lr

08006b58 <_fini>:
 8006b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5a:	bf00      	nop
 8006b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5e:	bc08      	pop	{r3}
 8006b60:	469e      	mov	lr, r3
 8006b62:	4770      	bx	lr
